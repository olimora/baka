vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']]), type="response", norm.votes=TRUE)
#varImpPlot(forest)
return(predic)
})
forest
stopCluster(cl)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats
stats_day
forest
ad_ncol <- ncol(all_hours)
maxims <- apply(all_hours[,4:ad_ncol], 2, max)
minims <- apply(all_hours[,4:ad_ncol], 2, min)
scale <- abs(maxims - minims)
all_hours <- data.matrix(all_hours)
chosen_hours <- all_hours
fve_actual <- chosen_hours[,'praca']
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
data=train_set, ntree = i.ntree, mtry = i.mtry, importance=TRUE)
predic <-predict(forest, data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']]), type="response", norm.votes=TRUE)
forest
varImpPlot(forest)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
library(RPostgreSQL)
library(plyr)
library(randomForest)
library(snow)
source('~/GitHub/baka/R source/presentation_tests/functions.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stopCluster(cl)
library(RPostgreSQL)
library(plyr)
library(randomForest)
library(snow)
source('~/GitHub/baka/R source/presentation_tests/functions.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
library(RPostgreSQL)
library(plyr)
library(randomForest)
library(snow)
source('~/GitHub/baka/R source/presentation_tests/functions.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
library(RPostgreSQL)
library(plyr)
library(randomForest)
library(snow)
source('~/GitHub/baka/R source/presentation_tests/functions.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
library(RPostgreSQL)
library(plyr)
library(randomForest)
library(snow)
source('~/GitHub/baka/R source/presentation_tests/functions.R')
fve <- c(1, 2, 3)
tm.velkost <- 30
f.ntree <- 500
f.mtry <- 2
pod_gho <- c(220)
pod_obl <- c(80)
pod_tep <- c(30)
pod_vie <- c(5)
pod_vlh <- c(0)
pod_dlz <- c(50, 0)
pod_ele <- c(300, 250, 200, 150, 100, 50, 0)
prog.baseAll <- dbGetQuery(db.con, "select count(*) as ccc from (select distinct * from (select cas, fve from v_data) s1) s2")
prog.baseAll <- prog.baseAll$ccc
prog.opsAll <- length(tm.velkost) * length(f.ntree) * length(f.mtry) *
length(pod_gho) * length(pod_obl) * length(pod_tep) * length(pod_vie) *
length(pod_vlh) * length(pod_dlz) * length(pod_ele)
prog.baseAll <- prog.baseAll * prog.opsAll
db.drv <- dbDriver("PostgreSQL")
if (exists("db.con")) dbDisconnect(db.con)
db.con <- getConnection(db.drv)
prog.baseAll <- dbGetQuery(db.con, "select count(*) as ccc from (select distinct * from (select cas, fve from v_data) s1) s2")
prog.baseAll <- prog.baseAll$ccc
prog.opsAll <- length(tm.velkost) * length(f.ntree) * length(f.mtry) *
length(pod_gho) * length(pod_obl) * length(pod_tep) * length(pod_vie) *
length(pod_vlh) * length(pod_dlz) * length(pod_ele)
prog.baseAll <- prog.baseAll * prog.opsAll
prog.baseAll
prog.opsAll
if (exists("db.con")) dbDisconnect(db.con)
dbUnloadDriver(db.drv)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stopCluster(cl)
if (exists("db.con")) dbDisconnect(db.con)
dbUnloadDriver(db.drv)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stopCluster(cl)
if (exists("db.con")) dbDisconnect(db.con)
dbUnloadDriver(db.drv)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
train_set
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
train_set
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
train_set
train_set <- train_set[i.velkost:1,]
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
train_set
train_set[i.velkost:1,]
?arrange
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
if (exists("db.con")) dbDisconnect(db.con)
stopCluster(cl)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
stats
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
data=train_set, ntree = i.ntree, mtry = i.mtry)
predic <-predict(forest, data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']]), type="response", norm.votes=TRUE)
#varImpPlot(forest)
forest
train_set
train_set$gho
f_train_set <- factor(train_set)
f_train_set <- train_set
for (name in names(f_train_set)) {
f_train_set[[name]] <- factor(f_train_set[[name]])
}
f_train_set
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
data=f_train_set, ntree = i.ntree, mtry = i.mtry)
predic <-predict(forest, data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']]), type="response", norm.votes=TRUE)
forest
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
data=f_train_set)
forest
f_hourh <- data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']])
for (name in names(f_hourh)) {
f_hourh[[name]] <- factor(f_hourh[[name]])
}
predic <- predict(forest, f_hourh, type="response", norm.votes=TRUE)
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
f_train_set <- train_set
# for (name in names(f_train_set)) {
#   f_train_set[[name]] <- factor(f_train_set[[name]])
# }
f_hourh <- data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']])
# for (name in names(f_hourh)) {
#   f_hourh[[name]] <- factor(f_hourh[[name]])
# }
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
data=f_train_set)
predic <- predict(forest, f_hourh, type="response", norm.votes=TRUE)
#varImpPlot(forest)
forest
train_set
pod_gho <- 1 #c(240, 220, 200, 0)[2]
pod_obl <- 0 #c(90, 80, 70, 0)[2]
pod_tep <- 0 #c(35, 30, 25, 0)[2]
pod_vie <- 0 #c(6, 5, 4, 0)[2]
pod_vlh <- 0 #c(0)
pod_dlz <- 0 #c(55, 50, 45, 0)[2]
pod_ele <- 0 #c(0)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
train_set
arrange(as.data.frame(potencial), diff)[i.velkost:1,]
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
library(neuralnet)
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
f_hourh
stats_day
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
#train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
train_set <- arrange(as.data.frame(potencial), diff)[i.velkost:1,]
f_train_set <- train_set
# for (name in names(f_train_set)) {
#   f_train_set[[name]] <- factor(f_train_set[[name]])
# }
f_hourh <- data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']])
# for (name in names(f_hourh)) {
#   f_hourh[[name]] <- factor(f_hourh[[name]])
# }
# nnet <- neuralnet(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
#                   f_train_set, #startweights = e.neural_startweights,
#                    hidden= c(7,5,3), #threshold=e.neural_threshold
#                   )
# predic <- compute(n.net, f_hourh)$net.result
#plot(n.net)
forest <- randomForest(as.factor(praca)~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
data=f_train_set)
forest
predic <- predict(forest, f_hourh, type="response", norm.votes=TRUE)
predic
source('~/GitHub/baka/R source/presentation_tests/neur_paral_hod.R')
stats_day
stats
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
#train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
train_set <- arrange(as.data.frame(potencial), diff)[i.velkost:1,]
f_train_set <- train_set
# for (name in names(f_train_set)) {
#   f_train_set[[name]] <- factor(f_train_set[[name]])
# }
f_hourh <- data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']])
# for (name in names(f_hourh)) {
#   f_hourh[[name]] <- factor(f_hourh[[name]])
# }
# nnet <- neuralnet(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
#                   f_train_set, #startweights = e.neural_startweights,
#                    hidden= c(7,5,3), #threshold=e.neural_threshold
#                   )
# predic <- compute(n.net, f_hourh)$net.result
#plot(n.net)
forest <- randomForest(as.factor(praca)~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
data=f_train_set)
predic <- predict(forest, f_hourh, type="response", norm.votes=TRUE)
#varImpPlot(forest)
forest
source('~/GitHub/baka/R source/presentation_tests/neur_paral_hod.R')
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
#train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
train_set <- arrange(as.data.frame(potencial), diff)[i.velkost:1,]
f_train_set <- train_set
# for (name in names(f_train_set)) {
#   f_train_set[[name]] <- factor(f_train_set[[name]])
# }
f_hourh <- data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']])
# for (name in names(f_hourh)) {
#   f_hourh[[name]] <- factor(f_hourh[[name]])
# }
nnet <- neuralnet(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
f_train_set, #startweights = e.neural_startweights,
hidden= c(7,5,3) #,threshold=e.neural_threshold
)
predic <- compute(n.net, f_hourh)$net.result
nnet <- neuralnet(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
f_train_set, #startweights = e.neural_startweights,
hidden= c(7,5,3) #,threshold=e.neural_threshold
)
plot(n.net)
plot(nnet)
nnet
source('~/GitHub/baka/R source/presentation_tests/neur_paral_hod.R')
nnet <- neuralnet(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
f_train_set, #startweights = e.neural_startweights,
hidden= c(7,5,3) #,threshold=e.neural_threshold
)
library(neuralnet)
source('~/GitHub/baka/R source/presentation_tests/neur_paral_hod.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
warnings()
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_all.R')
stats_day
hourh <- chosen_hours[1,]
potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh
ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
#train_set <- arrange(as.data.frame(potencial), diff)[i.velkost:1,]
f_train_set <- train_set
# for (name in names(f_train_set)) {
#   f_train_set[[name]] <- factor(f_train_set[[name]])
# }
f_hourh <- data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],
teplota = hourh[['teplota']], vietor = hourh[['vietor']],
vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],
elev = hourh[['elev']])
# for (name in names(f_hourh)) {
#   f_hourh[[name]] <- factor(f_hourh[[name]])
# }
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,
data=f_train_set, nodesize = 3)
predic <- predict(forest, f_hourh, type="response", norm.votes=TRUE)
forest
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stopCluster(cl)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
warnings()
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stopCluster(cl)
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
if (exists("db.con")) dbDisconnect(db.con)
if (exists("db.con")) dbDisconnect(db.con)
library(RPostgreSQL)
library(plyr)
library(randomForest)
library(snow)
source('~/GitHub/baka/R source/presentation_tests/functions.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
stats_day
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
source('~/GitHub/baka/R source/presentation_tests/paral_hod_megascript.R')
library(sirad)
