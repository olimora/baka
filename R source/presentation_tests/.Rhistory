tm_velkost, tm_opis, tm_select, fve, den_hod,
in_gho, in_oblacnost, in_teplota, in_vietor, in_vlhkost, in_tlak, in_dlzkadna, in_azim, in_elev)
VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s',
%d, %f, %f, %f, %f, %f, %f, %f, %f, %f,
%d, '%s', '%s', '%s', '%s',
%s, %s, %s, %s, %s, %s, %s, %s, %s);",
time.start, "random forest", "tm " %s% as.character(i.velkost), "ntree " %s% as.character(i.ntree), "mtry " %s% "as.character(i.mtry)", "","",
stats$N, stats$MBE, stats$RMBE, stats$RMSE, stats$RRMSE, stats$MAE, stats$RMAE, stats$MPE, stats$MAXAE, stats$SD,
i.velkost, "najpodob dni ", select, "vsetky", "den",
#i.pod_gho, i.pod_obl, i.pod_tep, i.pod_vie, i.pod_dlz,
TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE)
insert <- sprintf("INSERT INTO t_experiment (cas_behu, metoda, param1, param2, param3, param4, param5,
N, MBE, RMBE, RMSE, RRMSE, MAE, RMAE, MPE, MAXAE, SD,
tm_velkost, tm_opis, tm_select, fve, den_hod,
pod_gho, pod_oblacnost, pod_teplota, pod_vietor, pod_vlhkost, pod_tlak, pod_dlzkadna, pod_azim, pod_elev,
in_gho, in_oblacnost, in_teplota, in_vietor, in_vlhkost, in_tlak, in_dlzkadna, in_azim, in_elev)
VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s',
%d, %f, %f, %f, %f, %f, %f, %f, %f, %f,
%d, '%s', '%s', '%s', '%s',
%f, %f, %f, %f, %f, %f, %f, %f, %f,
%s, %s, %s, %s, %s, %s, %s, %s, %s);",
time.start, "random forest", "tm " %s% as.character(i.velkost), "ntree " %s% as.character(i.ntree), "mtry " %s% "as.character(i.mtry)", "", "",
stats$N, stats$MBE, stats$RMBE, stats$RMSE, stats$RRMSE, stats$MAE, stats$RMAE, stats$MPE, stats$MAXAE, stats$SD,
i.velkost, "najpodob dni ", select, "vsetky", "den",
#i.pod_gho, i.pod_obl, i.pod_tep, i.pod_vie, i.pod_dlz,
TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE)
insert <- sprintf("INSERT INTO t_experiment (cas_behu, metoda, param1, param2, param3, param4, param5,
N, MBE, RMBE, RMSE, RRMSE, MAE, RMAE, MPE, MAXAE, SD,
tm_velkost, tm_opis, tm_select, fve, den_hod,
pod_gho, pod_oblacnost, pod_teplota, pod_vietor, pod_vlhkost, pod_tlak, pod_dlzkadna, pod_azim, pod_elev,
in_gho, in_oblacnost, in_teplota, in_vietor, in_vlhkost, in_tlak, in_dlzkadna, in_azim, in_elev)
VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s',
%d, %f, %f, %f, %f, %f, %f, %f, %f, %f,
%d, '%s', '%s', '%s', '%s',
%f, %f, %f, %f, %f, %f, %f, %f, %f,
%s, %s, %s, %s, %s, %s, %s, %s, %s);",
time.start, "random forest", "tm " %s% as.character(i.velkost), "ntree " %s% as.character(i.ntree), "mtry " %s% "as.character(i.mtry)", "", "",
stats$N, stats$MBE, stats$RMBE, stats$RMSE, stats$RRMSE, stats$MAE, stats$RMAE, stats$MPE, stats$MAXAE, stats$SD,
i.velkost, "najpodob dni ", select, "vsetky", "den",
i.pod_gho, i.pod_obl, i.pod_tep, i.pod_vie, 0, 0, i.pod_dlz, 0, 0,
TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE)
db.result <- dbGetQuery(db.con, insert)
pod_vie <- c(6, 5, 4, 0)
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3_par.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3_par.R')
stopCluster(cl)
print(sprintf("Start: %s, End: %s, Duration: %s",
)
)
stopCluster(cl)
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3_par.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3_par.R')
tm.velkost <- c(130, 110, 90, 70, 50, 30) [2]
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3_par.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3_par.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
if (exists("db.con")) dbDisconnect(db.con)
db.con <- getConnection(db.drv)
source('~/GitHub/baka/R source/presentation_tests/param1.R')
#pocet vsetkyc dni - pocitam percenta
prog.baseAll <- dbGetQuery(db.con, "select count(*) as ccc from (select distinct * from (select datum, fve from v_data) s1) s2")
prog.baseAll <- prog.baseAll$ccc
prog.opsAll <- length(tm.velkost) * length(f.ntree) * length(f.mtry) *
length(pod_gho) * length(pod_obl) * length(pod_tep) * length(pod_vie) * length(pod_dlz)
prog.baseAll <- prog.baseAll * prog.opsAll
for (i.fve in fve) {
all_days <- dbGetQuery(db.con, sprintf(select, i.fve))
ad_ncol <- ncol(all_days)
maxims <- sapply(all_days[,3:ad_ncol], max)
minims <- sapply(all_days[,3:ad_ncol], min)
scale <- abs(maxims - minims)
all_days <- data.matrix(all_days)
chosen_days <- all_days
fve_actual <- chosen_days[,'praca']
clusterExport(cl, list("chosen_days", "all_days", "scale",
"i.pod_gho", "i.pod_obl", "i.pod_tep", "i.pod_vie", "i.pod_dlz",
"i.ntree", "i.mtry", "i.velkost"))
fve_output <- sapply(1:nrow(chosen_days), function(y) {
dayd <- chosen_days[y,]
potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+dlzkadna,
data=train_set, ntree = i.ntree, mtry = i.mtry)
predic <-predict(forest, data.frame(gho = dayd[['gho']], oblacnost = dayd[['oblacnost']],
teplota = dayd[['teplota']], vietor = dayd[['vietor']],
dlzkadna = dayd[['dlzkadna']]), type="response", norm.votes=TRUE)
# varImpPlot(forest)
return(predic)
})
actual <- append(actual, fve_actual)
output <- append(output, fve_output)
days_done <- days_done + nrow(all_days)
prog.i <- days_done
prog.print_perc_all <- (prog.i * 100 / prog.baseAll)
prog.op <- ops_done
prog.print_perc_ops <- (prog.op * 100 / prog.opsAll)
if (prog.print_perc_all > prog.printed_all + prog.diff) {
prog.actual_time <- as.numeric(difftime(Sys.time(), time.start, units = "sec"))
prog.estimated_time <- prog.actual_time * 100 / prog.print_perc_all
print(sprintf("Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s", #
prog.print_perc_all, "%", prog.op, prog.opsAll, prog.i, prog.baseAll, #
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
prog.printed_all <- prog.print_perc_all
#prog.printed_ops <- prog.print_perc_ops
}
} # fve
fve_output <- sapply(1:nrow(chosen_days), function(y) {
dayd <- chosen_days[y,]
potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
return(ret)
})
source('~/GitHub/baka/R source/presentation_tests/param1.R')
}
}
source('~/GitHub/baka/R source/presentation_tests/param1.R')
prog.op <- ops_done
prog.print_perc_ops <- (prog.op * 100 / prog.opsAll)
if (prog.print_perc_all > prog.printed_all + prog.diff) {
prog.actual_time <- as.numeric(difftime(Sys.time(), time.start, units = "sec"))
prog.estimated_time <- prog.actual_time * 100 / prog.print_perc_all
print(sprintf("Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s", #
prog.print_perc_all, "%", prog.op, prog.opsAll, prog.i, prog.baseAll, #
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
prog.printed_all <- prog.print_perc_all
#prog.printed_ops <- prog.print_perc_ops
}
sprintf("Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s", #
prog.print_perc_all, "%", prog.op, prog.opsAll, prog.i, prog.baseAll, #
format.time(prog.estimated_time),
format.time(prog.actual_time))
format.time(prog.estimated_time)
prog.estimated_time
prog.actual_time * 100 / prog.print_perc_all
prog.print_perc_all
(prog.i * 100 / prog.baseAll)
prog.baseAll
days_done
source('~/GitHub/baka/R source/presentation_tests/param1.R')
days_done <- days_done + nrow(all_days)
prog.i <- days_done
prog.print_perc_all <- (1 * 100 / prog.baseAll)
prog.op <- ops_done
prog.print_perc_ops <- (1 * 100 / prog.opsAll)
if (prog.print_perc_all > prog.printed_all + prog.diff) {
prog.actual_time <- as.numeric(difftime(Sys.time(), time.start, units = "sec"))
prog.estimated_time <- prog.actual_time * 100 / prog.print_perc_all
print(sprintf("Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s", #
prog.print_perc_all, "%", prog.op, prog.opsAll, prog.i, prog.baseAll, #
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
prog.printed_all <- prog.print_perc_all
#prog.printed_ops <- prog.print_perc_ops
}
source('~/GitHub/baka/R source/presentation_tests/param1.R')
print(sprintf("Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s", #
prog.print_perc_all, "%", prog.op, prog.opsAll, prog.i, prog.baseAll, #
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
print(sprintf("Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s", #
prog.print_perc_all, "%", prog.op, prog.opsAll, prog.i, prog.baseAll, #
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
print(sprintf("Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s", #
prog.print_perc_all, "%", prog.op, prog.opsAll, prog.i, prog.baseAll, #
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
fve_output <- sapply(1:nrow(chosen_days), function(y) {
dayd <- chosen_days[y,]
potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+dlzkadna,
data=train_set, ntree = i.ntree, mtry = i.mtry)
predic <-predict(forest, data.frame(gho = dayd[['gho']], oblacnost = dayd[['oblacnost']],
teplota = dayd[['teplota']], vietor = dayd[['vietor']],
dlzkadna = dayd[['dlzkadna']]), type="response", norm.votes=TRUE)
# varImpPlot(forest)
return(predic)
})
chosen_days
train_set
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
print(sprintf("Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s", #
prog.print_perc_all, "%", prog.op, prog.opsAll, prog.i, prog.baseAll, #
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
prog.estimated_time
prog.actual_time
prog.op
prog.i
prog.baseAll
days_done
prog.i
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
all_days <- dbGetQuery(db.con, sprintf(select, i.fve))
ad_ncol <- ncol(all_days)
maxims <- sapply(all_days[,3:ad_ncol], max)
minims <- sapply(all_days[,3:ad_ncol], min)
scale <- abs(maxims - minims)
all_days <- data.matrix(all_days)
#chosen_days <- all_days
fve_actual <- all_days[,'praca']
fve_output <- sapply(1:nrow(all_days), function(y) {
dayd <- all_days[y,]
potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * pod_dlz
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:tm_velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+dlzkadna,
data=train_set, ntree = f.ntree, mtry = f.mtry)
predic <-predict(forest, data.frame(gho = dayd[['gho']], oblacnost = dayd[['oblacnost']],
teplota = dayd[['teplota']], vietor = dayd[['vietor']],
dlzkadna = dayd[['dlzkadna']]), type="response", norm.votes=TRUE)
# varImpPlot(forest)
return(predic)
})
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * pod_dlz
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:tm_velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+dlzkadna,
data=train_set, ntree = f.ntree, mtry = f.mtry)
predic <-predict(forest, data.frame(gho = dayd[['gho']], oblacnost = dayd[['oblacnost']],
teplota = dayd[['teplota']], vietor = dayd[['vietor']],
dlzkadna = dayd[['dlzkadna']]), type="response", norm.votes=TRUE)
# varImpPlot(forest)
return(predic)
dayd <- all_days[y,]
potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
dayd <- all_days[y,]
potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * pod_dlz
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:tm_velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+dlzkadna,
data=train_set, ntree = f.ntree, mtry = f.mtry)
predic <-predict(forest, data.frame(gho = dayd[['gho']], oblacnost = dayd[['oblacnost']],
teplota = dayd[['teplota']], vietor = dayd[['vietor']],
dlzkadna = dayd[['dlzkadna']]), type="response", norm.votes=TRUE)
# varImpPlot(forest)
return(predic)
predic
fve_output <- sapply(1:nrow(all_days), function(y) {
dayd <- all_days[y,]
potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * pod_dlz
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:tm_velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+dlzkadna,
data=train_set, ntree = f.ntree, mtry = f.mtry)
predic <-predict(forest, data.frame(gho = dayd[['gho']], oblacnost = dayd[['oblacnost']],
teplota = dayd[['teplota']], vietor = dayd[['vietor']],
dlzkadna = dayd[['dlzkadna']]), type="response", norm.votes=TRUE)
# varImpPlot(forest)
return(predic)
})
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
stopCluster(cl)
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
c(130, 110, 90, 70, 50, 30) [6]
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/param1.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/den_naj30_var3.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
source('~/GitHub/baka/R source/presentation_tests/po starom.R')
db.drv <- dbDriver("PostgreSQL")
if (exists("db.con")) dbDisconnect(db.con)
db.con <- getConnection(db.drv)
prog.baseAll <- dbGetQuery(db.con, "select count(*) as ccc from (select distinct * from (select datum, fve from v_data
where to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') > to_date('20.3.2000', 'DD.MM.2000')
and to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') <= to_date('23.9.2000', 'DD.MM.2000')
) s1) s2")
prog.baseAll
all_days <- dbGetQuery(db.con, sprintf(select, 1))
all_days
select <- " SELECT datum, sum(praca) praca, sum(gho) gho, sum(oblacnost) oblacnost,
sum(teplota) teplota, sum(vietor) vietor, max(dlzkadna) dlzkadna
FROM v_data WHERE fve = %d
and to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') > to_date('20.3.2000', 'DD.MM.2000')
and to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') <= to_date('23.9.2000', 'DD.MM.2000')
GROUP BY datum ORDER BY datum"
all_days <- dbGetQuery(db.con, sprintf(select, 1))
all_days
select <- " SELECT datum, sum(praca) praca, sum(gho) gho, sum(oblacnost) oblacnost,
sum(teplota) teplota, sum(vietor) vietor, max(dlzkadna) dlzkadna
FROM v_data WHERE fve = %d
GROUP BY datum ORDER BY datum"
chosen_days <- dbGetQuery(db.con, sprintf("select distinct datum from v_data
where to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') > to_date('20.3.2000', 'DD.MM.2000')
and to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') <= to_date('23.9.2000', 'DD.MM.2000')
ORDER BY datum", 1))
chosen_days
chosen_days <- data.matrix(chosen_days)
chosen_days
all_days[,'datum'] %in% chosen_days
all_days
all_days <- dbGetQuery(db.con, sprintf(select, i.fve))
all_days
all_days[,'datum'] %in% chosen_days
all_days[all_days[,'datum'] %in% chosen_days ,'praca']
fve_actual
length(fve_actual)
length(chosen_days)
chosen_days
chosen_days <- dbGetQuery(db.con, sprintf("select distinct datum from v_data
where to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') > to_date('20.3.2000', 'DD.MM.2000')
and to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') <= to_date('23.9.2000', 'DD.MM.2000')
and fve = %d
ORDER BY datum", i.fve))
chosen_days
data.matrix(chosen_days)
chosen_days <- data.matrix(chosen_days)
chosen_days
all_days[,'datum'] %in% chosen_days
length(subset(all_days[,'datum'] %in% chosen_days, TRUE))
length(subset(all_days[,'datum'] %in% chosen_days, value = T))
all_days[all_days[,'datum'] %in% chosen_days ,'praca']
fve_actual <- all_days[all_days[,'datum'] %in% chosen_days ,'praca']
fve_actual
length(fve_actual)
nrow(chosen_days)
source('~/GitHub/baka/R source/presentation_tests/param1.R')
dayd <- chosen_days[y,]
chosen_days[1,]
dayd <- chosen_days[1,]
dayd
chosen_days <- data.matrix(chosen_days)
chosen_days
all_days[all_days[,'datum'] %in% chosen_days ,]
chosen_days
all_days[,'datum'] %in% chosen_days
all_days[all_days[,'datum'] %in% chosen_days,]
chosen_days <- all_days[all_days[,'datum'] %in% chosen_days,]
chosen_days
length(chosen_days)
nrow(chosen_days)
fve_actual <- chosen_days[,'praca']
fve_actual
source('~/GitHub/baka/R source/presentation_tests/param1.R')
stats
actual
output
source('~/GitHub/baka/R source/presentation_tests/param1.R')
stats
output
actual
cbind(actual, output)
source('~/GitHub/baka/R source/presentation_tests/leto.R')
stats
source('~/GitHub/baka/R source/presentation_tests/zima.R')
source('~/GitHub/baka/R source/presentation_tests/zima.R')
source('~/GitHub/baka/R source/presentation_tests/zima.R')
all_days <- dbGetQuery(db.con, sprintf(select, i.fve))
ad_ncol <- ncol(all_days)
maxims <- sapply(all_days[,3:ad_ncol], max)
minims <- sapply(all_days[,3:ad_ncol], min)
scale <- abs(maxims - minims)
all_days <- data.matrix(all_days)
chosen_days <- dbGetQuery(db.con, sprintf("select distinct datum from v_data
where to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') <= to_date('20.3.2000', 'DD.MM.2000')
and to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') > to_date('23.9.2000', 'DD.MM.2000')
and fve = %d
ORDER BY datum", i.fve))
chosen_days <- data.matrix(chosen_days)
chosen_days <- all_days[all_days[,'datum'] %in% chosen_days,]
fve_actual <- chosen_days[,'praca']
clusterExport(cl, list("chosen_days", "all_days", "scale",
"i.pod_gho", "i.pod_obl", "i.pod_tep", "i.pod_vie", "i.pod_dlz",
"i.ntree", "i.mtry", "i.velkost"))
fve_output <- parSapply(cl, 1:nrow(chosen_days), function(y) {
dayd <- chosen_days[y,]
potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]
diff <- vector(mode = "numeric", length = nrow(potencial))
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
return(ret)
})
train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]
forest <- randomForest(praca~gho+oblacnost+teplota+vietor+dlzkadna,
data=train_set, ntree = i.ntree, mtry = i.mtry)
predic <-predict(forest, data.frame(gho = dayd[['gho']], oblacnost = dayd[['oblacnost']],
teplota = dayd[['teplota']], vietor = dayd[['vietor']],
dlzkadna = dayd[['dlzkadna']]), type="response", norm.votes=TRUE)
# varImpPlot(forest)
return(predic)
})
diff <- sapply(1:length(diff), function(x) {
ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho
ret <- ret + abs(dayd[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl
ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep
ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie
ret <- ret + abs(dayd[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz
return(ret)
})
dayd <- chosen_days[1,]
chosen_days <- dbGetQuery(db.con, sprintf("select distinct datum from v_data
where to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') <= to_date('20.3.2000', 'DD.MM.2000')
and to_date(to_char(datum, 'DD.MM.YYYY'), 'DD.MM.2000') > to_date('23.9.2000', 'DD.MM.2000')
and fve = %d
ORDER BY datum", i.fve))
chosen_days
source('~/GitHub/baka/R source/presentation_tests/zima.R')
source('~/GitHub/baka/R source/presentation_tests/zima.R')
stats
source('~/GitHub/baka/R source/presentation_tests/zima.R')
stats
source('~/GitHub/baka/R source/presentation_tests/zima.R')
stats
sum(actual) / 513
warnings()
source('~/GitHub/baka/R source/presentation_tests/leto.R')
stats
source('~/GitHub/baka/R source/presentation_tests/leto.R')
stats
source('~/GitHub/baka/R source/presentation_tests/leto.R')
stats
sum(actual) / 636
