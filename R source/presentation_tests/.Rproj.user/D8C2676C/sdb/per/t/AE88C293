{
    "collab_server" : "",
    "contents" : "#predikcia po dni, setky FVE, 30 predchadzajucich, oblacnost normalne\n{\n  library(RPostgreSQL)\n  library(plyr)\n  library(randomForest)\n  library(snow)\n  source('~/GitHub/baka/R source/presentation_tests/functions.R')\n}\n\ncl <- makeCluster(4, type='SOCK')\n\nclusterEvalQ(cl, format.time <- function(x) UseMethod(\"format.time\"))\nclusterEvalQ(cl, { library(plyr); library(randomForest) })\n\n\n{\n  write_results <- F\n  fve <- c(1, 2, 3)\n  tm.velkost <- c(130, 110, 90, 70, 50, 30) [6]\n  f.ntree <- c(1000, 700, 500, 300, 100) [3]\n  f.mtry <- c(2)\n  \n  pod_gho <- c(240, 220, 200, 0)[2]\n  pod_obl <- c(90, 80, 70, 0)[2]\n  pod_tep <- c(35, 30, 25, 0)[2]\n  pod_vie <- c(6, 5, 4, 0)[2]\n  pod_vlh <- c(0)\n  pod_dlz <- c(55, 50, 45, 0)[2]\n  pod_ele <- c(300)\n  \n  prog.diff <- 0\n  prog.printed_all <- -10000\n  prog.printed_ops <- -10000\n  prog.print_perc_all <- 0\n  prog.baseAll <- 0\n  prog.opsAll <- 0\n  prog.i <- 0\n  prog.op <- 0\n  \n  db.drv <- dbDriver(\"PostgreSQL\")\n  if (exists(\"db.con\")) dbDisconnect(db.con)\n  db.con <- getConnection(db.drv)\n}\n\n{\n  #pocet vsetkyc dni - pocitam percenta\n  prog.baseAll <- dbGetQuery(db.con, \"select count(*) as ccc from (select distinct * from (select cas, fve from v_data) s1) s2\")\n  prog.baseAll <- prog.baseAll$ccc\n  prog.opsAll <- length(tm.velkost) * length(f.ntree) * length(f.mtry) * \n    length(pod_gho) * length(pod_obl) * length(pod_tep) * length(pod_vie) * \n    length(pod_vlh) * length(pod_dlz) * length(pod_ele)\n  prog.baseAll <- prog.baseAll * prog.opsAll\n}\n\ntime.start <- Sys.time()\n# actual <- vector(mode = \"numeric\", length = prog.baseAll)\n# output <- vector(mode = \"numeric\", length = prog.baseAll)\n\n\n\nselect <- \" SELECT datum, cas, praca, gho, oblacnost, \nteplota, vietor, vlhkost, dlzkadna, elev\nFROM v_data WHERE fve = %d ORDER BY cas\"\n\nhours_done <- 0\nops_done <- 0\n\ni.pod_gho <- pod_gho\ni.pod_obl <- pod_obl\ni.pod_tep <- pod_tep\ni.pod_vie <- pod_vie\ni.pod_vlh <- pod_vlh\ni.pod_dlz <- pod_dlz\ni.pod_ele <- pod_ele\ni.velkost <- tm.velkost\ni.ntree <- f.ntree\ni.mtry <- f.mtry\n\n\nops_done <- ops_done + 1\n\nactual <- c()\noutput <- c()\n\nfor (i.fve in fve) {\n  \n  all_hours <- dbGetQuery(db.con, sprintf(select, i.fve))\n  \n  ad_ncol <- ncol(all_hours)\n  maxims <- apply(all_hours[,4:ad_ncol], 2, max)\n  minims <- apply(all_hours[,4:ad_ncol], 2, min)\n  scale <- abs(maxims - minims)\n  all_hours <- data.matrix(all_hours)\n  \n  chosen_hours <- all_hours\n  \n  fve_actual <- chosen_hours[,'praca']\n  \n  clusterExport(cl, list(\"chosen_hours\", \"all_hours\", \"scale\",\n                         \"i.pod_gho\", \"i.pod_obl\", \"i.pod_tep\", \"i.pod_vie\", \"i.pod_dlz\",\n                         \"i.pod_vlh\", \"i.pod_ele\",\n                         \"i.ntree\", \"i.mtry\", \"i.velkost\"))\n  fve_output <- parSapply(cl, 1:nrow(chosen_hours), function(y) {\n    hourh <- chosen_hours[1,]\n    potencial <- all_hours[all_hours[,'datum'] != hourh[['datum']],]\n    diff <- vector(mode = \"numeric\", length = nrow(potencial))\n    \n    diff <- sapply(1:length(diff), function(x) {\n      ret <- abs(hourh[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * i.pod_gho\n      ret <- ret + abs(hourh[['oblacnost']] - potencial[[x,'oblacnost']]) * 100 / scale[['oblacnost']] * i.pod_obl\n      ret <- ret + abs(hourh[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * i.pod_tep\n      ret <- ret + abs(hourh[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * i.pod_vie\n      ret <- ret + abs(hourh[['vlhkost']] - potencial[[x,'vlhkost']]) * 100 / scale[['vlhkost']] * i.pod_vlh\n      ret <- ret + abs(hourh[['dlzkadna']] - potencial[[x,'dlzkadna']]) * 100 / scale[['dlzkadna']] * i.pod_dlz\n      ret <- ret + abs(hourh[['elev']] - potencial[[x,'elev']]) * 100 / scale[['elev']] * i.pod_ele\n      return(ret)\n    })\n    \n    train_set <- arrange(as.data.frame(potencial), diff)[1:i.velkost,]\n    #train_set <- arrange(as.data.frame(potencial), diff)[i.velkost:1,]\n    \n    forest <- randomForest(praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev,\n                           data=train_set, nodesize = 3)\n    predic <- predict(forest, data.frame(gho = hourh[['gho']], oblacnost = hourh[['oblacnost']],\n                                         teplota = hourh[['teplota']], vietor = hourh[['vietor']],\n                                         vlhkost = hourh[['vlhkost']], dlzkadna = hourh[['dlzkadna']],\n                                         elev = hourh[['elev']]), type=\"response\", norm.votes=TRUE)\n    #varImpPlot(forest)\n    \n    return(predic)\n  })\n  \n  actual <- append(actual, fve_actual)\n  output <- append(output, fve_output)\n  \n  hours_done <- hours_done + nrow(all_hours)\n  prog.i <- hours_done\n  prog.print_perc_all <- (prog.i * 100 / prog.baseAll)\n  \n  prog.op <- ops_done\n  prog.print_perc_ops <- (prog.op * 100 / prog.opsAll)\n  if (prog.print_perc_all > prog.printed_all + prog.diff) {\n    prog.actual_time <- as.numeric(difftime(Sys.time(), time.start, units = \"sec\"))\n    prog.estimated_time <- prog.actual_time * 100 / prog.print_perc_all\n    print(sprintf(\"Forest perc: %6.2f%s, ops: %7.d/%d, day: %9.d/%d, Estimated time: %s, Actual: %s\", #\n                  prog.print_perc_all, \"%\", prog.op, prog.opsAll, prog.i, prog.baseAll, #\n                  format.time(prog.estimated_time),\n                  format.time(prog.actual_time)),\n          quote=F)\n    prog.printed_all <- prog.print_perc_all\n    #prog.printed_ops <- prog.print_perc_ops\n  }\n  \n  \n} # fve\n\n# statistika presnosti\nstats <- all_statistics(actual, output)\n\n# if (write_results) {\n#   for (name in names(stats)) {\n#     if (is.infinite(stats[[name]]) | !is.numeric(stats[[name]]) | is.nan(stats[[name]])) stats[[name]] <- 999.999\n#   }\n#   insert <- sprintf(\"INSERT INTO t_experiment (cas_behu, metoda, param1, param2, param3, param4, param5,\n#     N, MBE, RMBE, RMSE, RRMSE, MAE, RMAE, MPE, MAXAE, SD,\n#     tm_velkost, tm_opis, tm_select, fve, den_hod,\n#     in_gho, in_oblacnost, in_teplota, in_vietor, in_vlhkost, in_tlak, in_dlzkadna, in_azim, in_elev)\n#     VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s',\n#     %d, %f, %f, %f, %f, %f, %f, %f, %f, %f,\n#     %d, '%s', '%s', '%s', '%s',\n#     %s, %s, %s, %s, %s, %s, %s, %s, %s);\",\n#                     time.start, \"random forest\", \"tm 30\", \"ntree 700\", \"mtry 2\", \"\", \"\",\n#                     stats$N, stats$MBE, stats$RMBE, stats$RMSE, stats$RRMSE, stats$MAE, stats$RMAE, stats$MPE, stats$MAXAE, stats$SD,\n#                     30, \"30 najpodob dni podla gho90, tep10, vie1\", select, \"vsetky\", \"den\",\n#                     TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE)\n#\n#   db.result <- dbGetQuery(db.con, insert)\n# }\n\n\n\ntime.end <- Sys.time()\nprint(sprintf(\"Start: %s, End: %s, Duration: %s\",\n              time.start, time.end, \n              format.time(difftime(time.end, time.start, units = \"sec\"))),\n      quote = F)\n\n# if (exists(\"db.con\")) dbDisconnect(db.con)\n# dbUnloadDriver(db.drv)\n\n#stopCluster(cl)\n\n# db.drv <- dbDriver(\"PostgreSQL\")\n# if (exists(\"db.con\")) dbDisconnect(db.con)\ndb.con <- getConnection(db.drv)\nall_data <-  dbGetQuery(db.con, \"SELECT fve, datum, cas, gho, oblacnost,\n                      teplota, vietor, vlhkost, dlzkadna, elev, praca\n                      FROM v_data ORDER BY fve, cas\")\nall_data <- cbind(all_data, output)\nto_see <- cbind(all_data, dif = abs(output - actual) * 100 / actual)\nto_see <- arrange(to_see, to_see$dif)\n\ngroupped <- ddply(all_data,~datum+fve,summarise, gho=sum(gho), oblacnost=sum(oblacnost),\n                  teplota=sum(teplota), vietor=sum(vietor), vlhkost=sum(vlhkost),\n                  dlzkadna=max(dlzkadna), praca=sum(praca), output=sum(output))\n\nstats_day <- all_statistics(groupped$praca, groupped$output)\n\nif (exists(\"db.con\")) dbDisconnect(db.con)\nstopCluster(cl)\n",
    "created" : 1460465859439.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3193842782",
    "id" : "AE88C293",
    "lastKnownWriteTime" : 1460551020,
    "last_content_update" : 1460551020466,
    "path" : "~/GitHub/baka/R source/presentation_tests/paral_hod_all.R",
    "project_path" : "paral_hod_all.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}