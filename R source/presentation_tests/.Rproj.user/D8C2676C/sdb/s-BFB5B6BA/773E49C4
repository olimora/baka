{
    "collab_server" : "",
    "contents" : "#predikcia po dni, setky FVE, 30 predchadzajucich, oblacnost normalne\n{\n  library(RPostgreSQL)\n  library(plyr)\n  library(randomForest)\n  library(snow)\n  \n  source('~/GitHub/baka/R source/presentation_tests/functions.R')\n}\n\n# cl <- makeCluster(4, type='SOCK')\n\n\n\n{\n  write_results <- T\n  fve <- c(1, 2, 3)\n  tm_velkost <- 30\n  f.ntree <- 700\n  f.mtry <- 2\n  \n  pod_gho <- 90\n  pod_tep <- 10\n  pod_vie <- 1\n  \n  prog.diff <- 10\n  prog.printed_all <- -10000\n  prog.printed_part <- -10000\n  prog.print_perc_part <- 0\n  prog.print_perc_all <- 0\n  prog.baseAll <- 0\n  prog.basePart <- 0\n  prog.i <- 0\n  \n  db.drv <- dbDriver(\"PostgreSQL\")\n  if (exists(\"db.con\")) dbDisconnect(db.con)\n  db.con <- getConnection(db.drv)\n}\n\n{\n  #pocet vsetkyc dni - pocitam percenta\n  prog.baseAll <- dbGetQuery(db.con, \"select count(*) as ccc from (select distinct * from (select datum, fve from v_data) s1) s2\")\n  prog.baseAll <- prog.baseAll$ccc\n}\n\ntime.start <- Sys.time()\nactual <- vector(mode = \"numeric\", length = prog.baseAll)\noutput <- vector(mode = \"numeric\", length = prog.baseAll)\ni.vec <- 0\n\nselect <- \" SELECT datum, sum(praca) praca, sum(gho) gho, sum(oblacnost) oblacnost, \nsum(teplota) teplota, sum(vietor) vietor, max(dlzkadna) dlzkadna \nFROM v_data WHERE fve = %d GROUP BY datum ORDER BY datum\"\n\nfor (i.fve in fve) {\n  all_days <- dbGetQuery(db.con, sprintf(select, i.fve))\n  ad_ncol <- ncol(all_days)\n  maxims <- sapply(all_days[,3:ad_ncol], max)\n  minims <- sapply(all_days[,3:ad_ncol], min)\n  scale <- abs(maxims - minims)\n  all_days <- data.matrix(all_days)\n  \n  chosen_days <- all_days\n  \n  for (i.day in 1:nrow(chosen_days)) {\n    \n    dayd <- chosen_days[i.day,]\n    potencial <- all_days[all_days[,'datum'] != dayd[['datum']],]\n    diff <- vector(mode = \"numeric\", length = nrow(potencial))\n    \n    diff <- sapply(1:length(diff), function(x) {\n      ret <- abs(dayd[['gho']] - potencial[[x,'gho']]) * 100 / scale[['gho']] * pod_gho\n      ret <- ret + abs(dayd[['teplota']] - potencial[[x,'teplota']]) * 100 / scale[['teplota']] * pod_tep\n      ret <- ret + abs(dayd[['vietor']] - potencial[[x,'vietor']]) * 100 / scale[['vietor']] * pod_vie\n      \n      return(ret)\n    })\n    \n    train_set <- arrange(as.data.frame(potencial), diff)[1:30,]\n    \n    forest <- randomForest(praca~gho+oblacnost+teplota+vietor+dlzkadna, \n                           data=train_set, ntree = f.ntree, mtry = f.mtry, importance=TRUE, proximity=TRUE)\n    predic <-predict(forest, data.frame(gho = dayd[['gho']], oblacnost = dayd[['oblacnost']],\n                                        teplota = dayd[['teplota']], vietor = dayd[['vietor']], \n                                        dlzkadna = dayd[['dlzkadna']]), type=\"response\", norm.votes=TRUE)\n    # varImpPlot(forest)\n    \n    i.vec <- i.vec + 1\n    actual[i.vec] <- dayd[['praca']] \n    output[i.vec] <- predic\n    \n    {\n      prog.i <- prog.i + 1\n      # prog.print_perc_part <- (i * 100 / prog.basePart)\n      prog.print_perc_all <- (prog.i * 100 / prog.baseAll)\n      if (prog.print_perc_all >= prog.printed_all + prog.diff) {\n        prog.actual_time <- as.numeric(difftime(Sys.time(), time.start, units = \"sec\"))\n        prog.estimated_time <- prog.actual_time * 100 / prog.print_perc_all\n        print(sprintf(\"Forest perc: %6.2f%s, num: %7.d/%d, Estimated time: %s, Actual: %s\",\n                      prog.print_perc_all, \"%\", prog.i, prog.baseAll,\n                      format.time(prog.estimated_time),\n                      format.time(prog.actual_time)),\n              quote=F)\n        prog.printed_all <- prog.print_perc_all\n      }\n    }\n  }\n}\n\n# statistika presnosti\nstats <- all_statistics(actual, output)\nif (write_results) {\n  for (name in names(stats)) {\n    if (is.infinite(stats[[name]]) | !is.numeric(stats[[name]]) | is.nan(stats[[name]])) stats[[name]] <- 999.999\n  }\n  insert <- sprintf(\"INSERT INTO t_experiment (cas_behu, metoda, param1, param2, param3, param4, param5,\n                    N, MBE, RMBE, RMSE, RRMSE, MAE, RMAE, MPE, MAXAE, SD,\n                    tm_velkost, tm_opis, tm_select, fve, den_hod,\n                    in_gho, in_oblacnost, in_teplota, in_vietor, in_vlhkost, in_tlak, in_dlzkadna, in_azim, in_elev)\n                    VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s',\n                    %d, %f, %f, %f, %f, %f, %f, %f, %f, %f,\n                    %d, '%s', '%s', '%s', '%s',\n                    %s, %s, %s, %s, %s, %s, %s, %s, %s);\",\n                    time.start, \"random forest\", \"tm 30\", \"ntree 700\", \"mtry 2\", \"\", \"\",\n                    stats$N, stats$MBE, stats$RMBE, stats$RMSE, stats$RRMSE, stats$MAE, stats$RMAE, stats$MPE, stats$MAXAE, stats$SD,\n                    30, \"30 najpodob dni podla gho90, tep10, vie1\", select, \"vsetky\", \"den\",\n                    TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE)\n  \n  db.result <- dbGetQuery(db.con, insert)\n}\n\ntime.end <- Sys.time()\nprint(sprintf(\"Start: %s, End: %s, Duration: %s\",\n              time.start, time.end, \n              format.time(difftime(time.end, time.start, units = \"sec\"))),\n      quote = F)\n\nif (exists(\"db.con\")) dbDisconnect(db.con)\ndbUnloadDriver(db.drv)\n\n#stopCluster(cl)",
    "created" : 1460372162959.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3011132323",
    "id" : "773E49C4",
    "lastKnownWriteTime" : 1460381368,
    "last_content_update" : 1460381368383,
    "path" : "~/GitHub/baka/R source/presentation_tests/den_naj30_var2.R",
    "project_path" : "den_naj30_var2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}