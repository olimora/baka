{
    "collab_server" : "",
    "contents" : "library(RPostgreSQL)\nlibrary(plyr)\nlibrary(randomForest)\nlibrary(doParallel)\nlibrary(foreach)\ncl <- makeCluster(detectCores(), type='SOCK')\nregisterDoParallel(cl)\n\n# registerDoSEQ()\n\n\nsource('~/GitHub/baka/R source/project/functions.R')\n\nwrite_results <- T\nvzorka <- 0\ne.fve <- c(1, 2, 3)[3]\ne.tm_velkost <- c(30)\ne.ntree <- 500\ne.mtry <- c(2)\ne.pod_gho <- 90 #c(220)\ne.pod_obl <- 0 #c(85)\ne.pod_tep <- 10 #c(30)\ne.pod_vie <- 1 #c(5)\ne.pod_dlz <- 0 #c(50)\ne.pod_ele <- 0 #c(100)\n\nprog.diff <- 1\n\n{\n  \n  e.metoda <- \"randomForest\"\n  \n  pod_gho <- 0\n  pod_obl <- 0\n  pod_tep <- 0\n  pod_vie <- 0\n  pod_vlh <- 0\n  pod_tla <- 0\n  pod_dlz <- 0\n  pod_azi <- 0\n  pod_ele <- 0\n  \n  e.den_hod <- \"hod\"\n  formula <- unq(\"praca~gho+oblacnost+teplota+vietor+vlhkost+dlzkadna+elev\") \n  in_gho <- TRUE\n  in_obl <- TRUE\n  in_tep <- TRUE\n  in_vie <- TRUE\n  in_vlh <- F\n  in_tla <- F\n  in_dlz <- TRUE\n  in_azi <- F\n  in_ele <- TRUE\n  \n  {\n    e <- list()\n    e$metoda <- e.metoda\n    e$param1 <- \"\"\n    e$param2 <- \"\"\n    e$param3 <- \"\"\n    e$param4 <- \"\"\n    e$param5 <- \"\"\n    \n    e.tm_select_datum <- \" SELECT DISTINCT datum FROM v_data WHERE fve = %d ORDER BY datum \"\n    \n    e.tm_select_hod <- \" SELECT praca, gho, (100 - oblacnost) oblacnost, (100 + teplota) teplota, vietor, (100-vlhkost) vlhkost, dlzkadna, elev \n    FROM v_data WHERE fve = %d AND datum = '%s' ORDER BY cas \"\n    \n    e.tm_select <- \" SELECT datum, cas, praca, gho, (100-oblacnost) oblacnost, \n    (teplota + 100) teplota, vietor, (100 - vlhkost) vlhkost, dlzkadna, elev\n    FROM v_data WHERE fve = %d ORDER BY datum\"\n\n    e.tm_opis <- \" %d najpodobnejsich hodin podla\" %s% \n      ifelse(pod_gho > 0, \" dho * \" %s% pod_gho %s% \",\", \"\") %s% \n      ifelse(pod_obl > 0, \" opacnej oblacnosti * \" %s% pod_obl %s% \",\", \"\") %s% \n      ifelse(pod_tep > 0, \" teploty + 100 * \" %s% pod_tep %s% \",\", \"\") %s% \n      ifelse(pod_vie > 0, \" vetra * \" %s% pod_vie %s% \",\", \"\") %s% \n      ifelse(pod_tla > 0, \" tlaku * \" %s% pod_tla %s% \",\", \"\") %s% \n      ifelse(pod_dlz > 0, \" dlzky dna * \" %s% pod_dlz %s% \",\", \"\") %s% \n      ifelse(pod_azi > 0, \" azimutu * \" %s% pod_azi %s% \",\", \"\") %s% \n      ifelse(pod_ele > 0, \" elevacie * \" %s% pod_ele %s% \",\", \"\") %s% \n      \"  predikcia metodou \" %s% e.metoda %s% \" na vzorke \" %s% \n      ifelse(!is.null(vzorka) && vzorka > 0, vzorka %s% \" nahodnych\", \" vsetkych\") %s% \n      \" dni pre elektraren %s.\"\n    \n    # e$tm_velkost <- e.tm_velkost\n    # e$tm_opis <- e.tm_opis\n    # e$tm_select <- e.tm_select\n    e$fve <- c(\"FVE Dubravy 1\", \"FVE Dubravy 2\", \"FVE Plesivec\")\n    e$den_hod <- e.den_hod \n    \n    e$pod_gho <- pod_gho\n    e$pod_obl <- pod_obl\n    e$pod_tep <- pod_tep\n    e$pod_vie <- pod_vie\n    e$pod_vlh <- pod_vlh\n    e$pod_tla <- pod_tla\n    e$pod_dlz <- pod_dlz\n    e$pod_azi <- pod_azi\n    e$pod_ele <- pod_ele\n    \n    e$in_gho <- in_gho\n    e$in_obl <- in_obl\n    e$in_tep <- in_tep\n    e$in_vie <- in_vie\n    e$in_vlh <- in_vlh\n    e$in_tla <- in_tla\n    e$in_dlz <- in_dlz\n    e$in_azi <- in_azi\n    e$in_ele <- in_ele\n  }\n  \n  prog.printed_all <- -10000\n  prog.printed_part <- -10000\n  prog.print_perc_part <- 0\n  prog.print_perc_all <- 0\n  prog.baseAll <- 0\n  prog.basePart <- 0\n  prog.i <- 0\n  \n  db.drv <- dbDriver(\"PostgreSQL\")\n  \n}\n\nif (exists(\"db.con\")) dbDisconnect(db.con)\ndb.con <- getConnection(db.drv)\n\nif (!is.null(vzorka) && vzorka > 0) { # ak predikujemlen pre vzorku nahodnych\n  prog.baseAll <- vzorka\n} else {                              # ak predikujemlen pre vsetky dni\n  prog.baseAll <- dbGetQuery(db.con, \"SELECT count(*) FROM \" %s%\n                               \"(SELECT DISTINCT datum FROM t_produkcia WHERE fve = \" %s% e.fve[1] %s% \n                               ifelse(length(e.fve) > 1, \" OR fve = \" %s% e.fve[2], \"\") %s%\n                               ifelse(length(e.fve) > 2, \" OR fve = \" %s% e.fve[3], \"\") %s% \") s\")\n  prog.baseAll <- prog.baseAll$count\n}\nprog.baseAll <- prog.baseAll * length(e.fve) * length(e.tm_velkost) * length(e.ntree) * length(e.mtry) * \n  length(e.pod_gho) * length(e.pod_obl) * length(e.pod_tep) * length(e.pod_vie) * length(e.pod_dlz) * length(e.pod_ele)\n\ntime.start <- Sys.time()\n\nfor (i.pod_gho in e.pod_gho) {\n  pod_gho <- i.pod_gho\n  e$pod_gho <- i.pod_gho\n  \n  for (i.pod_obl in e.pod_obl) {\n    pod_obl <- i.pod_obl\n    e$pod_obl <- i.pod_obl\n    \n    for (i.pod_tep in e.pod_tep) {\n      pod_tep <- i.pod_tep\n      e$pod_tep <- i.pod_tep\n      \n      for (i.pod_vie in e.pod_vie) {\n        pod_vie <- i.pod_vie\n        e$pod_vie <- i.pod_vie\n        \n        for (i.pod_dlz in e.pod_dlz) {\n          pod_dlz <- i.pod_dlz\n          e$pod_dlz <- i.pod_dlz\n          \n          for (i.pod_ele in e.pod_ele) {\n            pod_ele <- i.pod_ele\n            e$pod_ele <- i.pod_ele\n            \n            for (i.fve in e.fve) {\n              e$tm_select <- sprintf(e.tm_select_datum, i.fve)\n              i.tm_select <- sprintf(e.tm_select_datum, i.fve)\n              \n              t.all_hours <- dbGetQuery(db.con, sprintf(e.tm_select, i.fve))\n              t.ncol <- ncol(t.all_hours)\n              scale.maxims <- sapply(t.all_hours[,4:t.ncol], max)\n              scale.minims <- sapply(t.all_hours[,4:t.ncol], min)\n              scale.scale <- abs(scale.maxims - scale.minims)\n              \n              for (i.tn_velkost in e.tm_velkost) {\n                e$tm_velkost <- i.tn_velkost\n                e$tm_opis <- sprintf(e.tm_opis, i.tn_velkost, e$fve[i.fve])\n                e$param1 <- \"tm_velk \" %s% i.tn_velkost\n                \n                for (i.ntree in e.ntree) { \n                  e$param2 <- \"ntree \" %s% i.ntree\n                  \n                  for (i.mtry in e.mtry) {\n                    e$param3 <- \"mtry \" %s% i.mtry\n                    \n                    {\n                      actual <- c()\n                      output <- c()\n                      # vytiahnem vsetky dni\n                      t.all_days = dbGetQuery(db.con, sprintf(e.tm_select_datum, i.fve))\n                      \n                      for (day in 1:nrow(t.all_days)) {\n                        day.datum <- t.all_days[[day, 'datum']]\n                        # vytiahnem hodiny\n                        t.hours = dbGetQuery(db.con, sprintf(e.tm_select_hod, i.fve, day.datum))\n\n                        actual <- append(actual, sum(t.hours[['praca']]))\n                        output_hod <- c()\n\n                        tm.potencial <- t.all_hours[c(day.datum != t.all_hours[['datum']]),]\n\n                        for (hour in 1:nrow(t.hours)) {\n                          t.chosen_one <- t.hours[hour,]\n\n                          # vypocitat rozdielnost\n                          t.differ <- c()\n                          for (j in 1:nrow(tm.potencial)) { #nrow(t.train_set)\n                            t.differ[j] <- (\n                               ifelse(in_gho, (abs(t.chosen_one[['gho']] - tm.potencial[[j,'gho']]) * 100 / scale.scale[['gho']]) * pod_gho, 0)\n                               +\n                                 ifelse(in_obl, (abs(t.chosen_one[['oblacnost']] - tm.potencial[[j,'oblacnost']]) * 100 / scale.scale[['oblacnost']]) * pod_obl, 0)\n                               +\n                                 ifelse(in_tep, (abs(t.chosen_one[['teplota']] - tm.potencial[[j,'teplota']]) * 100 / scale.scale[['teplota']]) * pod_tep, 0)\n                               +\n                                 ifelse(in_vie, (abs(t.chosen_one[['vietor']] - tm.potencial[[j,'vietor']]) * 100 / scale.scale[['vietor']]) * pod_vie, 0)\n                               # +\n                               #   ifelse(in_vlh, (abs(t.chosen_one[['vlhkost']] - tm.potencial[[j,'vlhkost']]) * 100 / scale.scale[['vlhkost']]) * pod_vlh, 0)\n                               # +\n                               #   ifelse(in_tla, (abs(t.chosen_one[['tlak']] - tm.potencial[[j,'tlak']]) * 100 / scale.scale[['tlak']]) * pod_tla, 0)\n                               +\n                                 ifelse(in_dlz, (abs(t.chosen_one[['dlzkadna']] - tm.potencial[[j,'dlzkadna']]) * 100 / scale.scale[['dlzkadna']]) * pod_dlz, 0)\n                               # +\n                               #   ifelse(in_azi, (abs(t.chosen_one[['azim']] - tm.potencial[[j,'azim']]) * 100 / scale.scale[['azim']]) * pod_azi, 0)\n                              +\n                              ifelse(in_ele, (abs(t.chosen_one[['elev']] - tm.potencial[[j,'elev']]) * 100 / scale.scale[['elev']]) * pod_ele, 0)\n                            )\n                          }\n\n                          tm.potencial['diff'] <- t.differ\n                          tm.ordered <- arrange(tm.potencial, tm.potencial[,'diff'])\n                          tm.train_set <- tm.ordered[1:i.tn_velkost,]\n\n                          forest <- randomForest(formula, data=tm.train_set, ntree = i.ntree, mtry = i.mtry, importance=TRUE, proximity=TRUE)\n                          output_hod <- append(output_hod, predict(forest, t.chosen_one, type=\"response\", norm.votes=TRUE))\n\n                        }\n                        output <- append(output, sum(output_hod))\n\n                        prog.i <- prog.i + 1\n                        # prog.print_perc_part <- (i * 100 / prog.basePart)\n                        prog.print_perc_all <- (prog.i * 100 / prog.baseAll)\n                        if (prog.print_perc_all >= prog.printed_all + prog.diff) {\n                          prog.actual_time <- as.numeric(difftime(Sys.time(), time.start, units = \"sec\"))\n                          prog.estimated_time <- prog.actual_time * 100 / prog.print_perc_all\n                          print(sprintf(\"Forest perc: %6.2f%s, num: %7.d/%d, Estimated time: %s, Actual: %s\",\n                                        prog.print_perc_all, \"%\", prog.i, prog.baseAll,\n                                        format.time(prog.estimated_time),\n                                        format.time(prog.actual_time)),\n                                quote=F)\n                          prog.printed_all <- prog.print_perc_all\n                        }\n\n                      }\n                      \n                      # statistika presnosti\n                      stats <- all_statistics(actual, output)\n                      if (write_results) {\n                        db.result <- dbGetQuery(db.con, build_insert_stats(e, stats, time.start, i.fve))\n                      }\n                    }\n\n                  } # for (i.mtry in e.mtry)\n                  \n                } # for (i.ntree in e.ntree)\n                \n              } # for (i.tn_velkost in e.tm_velkost)\n              \n            } #for (i.fve in e.fve)\n            \n          } # for (i.pod_ele in e.pod_ele)\n\n        } # for (i.pod_dlz in e.pod_dlz)\n        \n      } # for (i.pod_vie in e.pod_vie)\n      \n    } # for (i.pod_tep in e.pod_tep)\n    \n  } # for (i.pod_obl in e.pod_obl)\n  \n} # for (i.pod_gho in e.pod_gho)\n\n\ntime.end <- Sys.time()\nprint(sprintf(\"Start: %s, End: %s, Duration: %s\",\n              time.start, time.end, \n              format.time(difftime(time.end, time.start, units = \"sec\"))),\n      quote = F)\n\nregisterDoSEQ()\n\nif (exists(\"db.con\")) dbDisconnect(db.con)\ndbUnloadDriver(db.drv)\n\n",
    "created" : 1460189858305.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "162166938",
    "id" : "74FE5475",
    "lastKnownWriteTime" : 1460226039,
    "last_content_update" : 1460226039,
    "path" : "~/GitHub/baka/R source/project/rf_hod_hod.R",
    "project_path" : "rf_hod_hod.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}