{
    "collab_server" : "",
    "contents" : "library(RPostgreSQL)\nlibrary(plyr)\nlibrary(randomForest)\nlibrary(doParallel)\nlibrary(foreach)\n# cl <- makeCluster(detectCores(), type='PSOCK')\n# registerDoParallel(cl)\n# registerDoSEQ()\n\n\nsource('~/GitHub/baka/R source/project/functions.R')\n\nwrite_results <- T\nvzorka <- 0\ne.fve <- c(1, 2, 3)[3]\ne.tm_velkost <- 30\ne.ntree <- c(700)\ne.mtry <- c(2)\ne.pod_gho <- 0 #c(220)\ne.pod_obl <- 0 #c(85)\ne.pod_tep <- 0 #c(30)\ne.pod_vie <- 0 #c(5)\ne.pod_dlz <- 0 #c(50)\nobl_napk <- T\n\nprog.diff <- 1\n\n{\n  \n  e.metoda <- \"randomForest\"\n  \n  pod_gho <- 0\n  pod_obl <- 0\n  pod_tep <- 0\n  pod_vie <- 0\n  pod_vlh <- 0\n  pod_tla <- 0\n  pod_dlz <- 0\n  pod_azi <- 0\n  pod_ele <- 0\n  \n  e.den_hod <- \"den\"\n  formula <- unq(\"praca~gho+oblacnost+teplota+vietor+dlzkadna\") \n  in_gho <- TRUE\n  in_obl <- TRUE\n  in_tep <- TRUE\n  in_vie <- TRUE\n  in_vlh <- F\n  in_tla <- F\n  in_dlz <- TRUE\n  in_azi <- F\n  in_ele <- F\n  \n  {\n    e <- list()\n    e$metoda <- e.metoda\n    e$param1 <- \"\"\n    e$param2 <- \"\"\n    e$param3 <- \"\"\n    e$param4 <- \"\"\n    e$param5 <- \"\"\n    \n    e.tm_select <- \" SELECT datum, sum(praca) praca, sum(gho) gho, sum(oblacnost) oblacnost, \n    sum(teplota) teplota, sum(vietor) vietor, max(dlzkadna) dlzkadna\n    FROM v_data WHERE fve = %d GROUP BY datum ORDER BY datum\"\n    # e.tm_select2 <- \" SELECT datum, sum(praca) praca, sum(gho) gho, sum(100-oblacnost) oblacnost, \n    # sum(teplota) teplota, sum(vietor) vietor, max(dlzkadna) dlzkadna\n    # FROM v_data WHERE fve = %d GROUP BY datum ORDER BY datum\"\n    e.tm_opis <- \" %d poslednych dni podla\" %s% \n      ifelse(pod_gho > 0, \" scitaneho dho * \" %s% pod_gho %s% \",\", \"\") %s% \n      ifelse(pod_obl > 0, \" scitanej opacnej oblacnosti * \" %s% pod_obl %s% \",\", \"\") %s% \n      ifelse(pod_tep > 0, \" scitanej teploty * \" %s% pod_tep %s% \",\", \"\") %s% \n      ifelse(pod_vie > 0, \" scitaneho vetra * \" %s% pod_vie %s% \",\", \"\") %s% \n      ifelse(pod_tla > 0, \" priemerneho tlaku * \" %s% pod_tla %s% \",\", \"\") %s% \n      ifelse(pod_dlz > 0, \" dlzky dna * \" %s% pod_dlz %s% \",\", \"\") %s% \n      ifelse(pod_azi > 0, \" azimutu * \" %s% pod_azi %s% \",\", \"\") %s% \n      ifelse(pod_ele > 0, \" maximalnej elevacie * \" %s% pod_ele %s% \",\", \"\") %s% \n      \"  predikcia metodou \" %s% e.metoda %s% \" na vzorke \" %s% \n      ifelse(!is.null(vzorka) && vzorka > 0, vzorka %s% \" nahodnych\", \" vsetkych\") %s% \n      \" dni pre elektraren %s.\"\n    \n    # e$tm_velkost <- e.tm_velkost\n    # e$tm_opis <- e.tm_opis\n    # e$tm_select <- e.tm_select\n    e$fve <- c(\"FVE Dubravy 1\", \"FVE Dubravy 2\", \"FVE Plesivec\")\n    e$den_hod <- e.den_hod \n    \n    e$pod_gho <- pod_gho\n    e$pod_obl <- pod_obl\n    e$pod_tep <- pod_tep\n    e$pod_vie <- pod_vie\n    e$pod_vlh <- pod_vlh\n    e$pod_tla <- pod_tla\n    e$pod_dlz <- pod_dlz\n    e$pod_azi <- pod_azi\n    e$pod_ele <- pod_ele\n    \n    e$in_gho <- in_gho\n    e$in_obl <- in_obl\n    e$in_tep <- in_tep\n    e$in_vie <- in_vie\n    e$in_vlh <- in_vlh\n    e$in_tla <- in_tla\n    e$in_dlz <- in_dlz\n    e$in_azi <- in_azi\n    e$in_ele <- in_ele\n  }\n  \n  prog.printed_all <- -10000\n  prog.printed_part <- -10000\n  prog.print_perc_part <- 0\n  prog.print_perc_all <- 0\n  prog.baseAll <- 0\n  prog.basePart <- 0\n  prog.i <- 0\n  \n  db.drv <- dbDriver(\"PostgreSQL\")\n  \n}\n\nif (!is.null(vzorka) && vzorka > 0) { # ak predikujemlen pre vzorku nahodnych\n  prog.baseAll <- vzorka\n} else {                              # ak predikujemlen pre vsetky dni\n  if (exists(\"db.con\")) dbDisconnect(db.con)\n  db.con <- getConnection(db.drv)\n  prog.baseAll <- dbGetQuery(db.con, \"SELECT count(*) FROM \" %s%\n                               \"(SELECT DISTINCT datum, fve FROM t_produkcia WHERE fve = \" %s% e.fve[1] %s% \n                               ifelse(length(e.fve) > 1, \" OR fve = \" %s% e.fve[2], \"\") %s%\n                               ifelse(length(e.fve) > 2, \" OR fve = \" %s% e.fve[3], \"\") %s% \"\n                             and datum >= to_date('01.01.2015', 'DD.MM.YYYY')) s\")\n  prog.baseAll <- prog.baseAll$count\n  dbDisconnect(db.con)\n}\nprog.baseAll <- prog.baseAll * length(obl_napk) * length(e.fve) * length(e.tm_velkost) * length(e.ntree) * length(e.mtry) * \n  length(e.pod_gho) * length(e.pod_obl) * length(e.pod_tep) * length(e.pod_vie) * length(e.pod_dlz)\n\ntime.start <- Sys.time()\n\nfor (i.pod_gho in e.pod_gho) {\n  pod_gho <- i.pod_gho\n  e$pod_gho <- i.pod_gho\n  \n  for (i.pod_obl in e.pod_obl) {\n    pod_obl <- i.pod_obl\n    e$pod_obl <- i.pod_obl\n    \n    for (i.pod_tep in e.pod_tep) {\n      pod_tep <- i.pod_tep\n      e$pod_tep <- i.pod_tep\n      \n      for (i.pod_vie in e.pod_vie) {\n        pod_vie <- i.pod_vie\n        e$pod_vie <- i.pod_vie\n        \n        for (i.pod_dlz in e.pod_dlz) {\n          pod_dlz <- i.pod_dlz\n          e$pod_dlz <- i.pod_dlz\n          \n          for (i.fve in e.fve) {\n            e$tm_select <- sprintf(e.tm_select, i.fve)\n            i.tm_select <- sprintf(e.tm_select, i.fve)\n            \n            for (i.tn_velkost in e.tm_velkost) {\n              e$tm_velkost <- i.tn_velkost\n              e$tm_opis <- sprintf(e.tm_opis, i.tn_velkost, e$fve[i.fve])\n              e$param1 <- \"tm_velk \" %s% i.tn_velkost\n              \n              for (i.ntree in e.ntree) { \n                e$param2 <- \"ntree \" %s% i.ntree\n                \n                for (i.mtry in e.mtry) {\n                  e$param3 <- \"mtry \" %s% i.mtry\n                  \n                  {\n                    # vybrat vsetky dni elektratne / vzorku\n                    if (exists(\"db.con\")) dbDisconnect(db.con)\n                    db.con <- getConnection(db.drv)\n                    t.all_days <- dbGetQuery(db.con, sprintf(i.tm_select, i.fve))\n                    dbDisconnect(db.con)\n                    t.all_days[['oblacnost']]\n                    \n                    t.ncol <- ncol(t.all_days)\n                    scale.maxims <- sapply(t.all_days[,3:t.ncol], max)\n                    scale.minims <- sapply(t.all_days[,3:t.ncol], min)\n                    scale.scale <- abs(scale.maxims - scale.minims)\n                    \n                    t.chosen_days <- 0\n                    if (!is.null(vzorka) && vzorka > 0) { # ak len vzorka\n                      rand_vec <- c()\n                      while (length(rand_vec) < vzorka) {\n                        rand <- round(runif(1, 1, nrow(t.all_days)), 0)\n                        if (!rand %in% rand_vec) {\n                          rand_vec <- vector.add(rand_vec, rand)\n                        }\n                      }\n                      t.chosen_days <- t.all_days[rand_vec,]\n                      rm(rand_vec, rand)\n                    } else {                              # ak pre vsetky predikujem\n                      t.chosen_days <- t.all_days[31:nrow(t.all_days),]\n                    }\n                    \n                    t.chosen_days_c <- nrow(t.chosen_days)\n                    prog.basePart <- t.chosen_days_c\n                    actual <- c()\n                    output <- c()\n                  }\n                  \n                  for (i in 1:t.chosen_days_c) { #t.chosen_days_c\n                    # pre kazdy den vybrat trenovaciu mnozinu\n                    t.chosen_one <- t.chosen_days[i,]\n                    #t.not_i <- c(t.chosen_one[1,'datum'] != t.all_days[,'datum'])\n                    t.train_set <- t.all_days[c(t.all_days[['datum']] < t.chosen_one[1,'datum'] & t.all_days[['datum']] >= t.chosen_one[1,'datum']-30),] \n                    \n                    # # vypocitat rozdielnost\n                    # t.differ <- c()\n                    # for (j in 1:nrow(t.train_set)) { #nrow(t.train_set)\n                    #   t.differ[j] <- ( \n                    #     ifelse(in_gho, (abs(t.chosen_one[['gho']] - t.train_set[[j,'gho']]) * 100 / scale.scale[['gho']]) * pod_gho, 0)\n                    #     +\n                    #       ifelse(in_obl, (abs(t.chosen_one[['oblacnost']] - t.train_set[[j,'oblacnost']]) * 100 / scale.scale[['oblacnost']]) * pod_obl, 0)\n                    #     +\n                    #       ifelse(in_tep, (abs(t.chosen_one[['teplota']] - t.train_set[[j,'teplota']]) * 100 / scale.scale[['teplota']]) * pod_tep, 0)\n                    #     +\n                    #       ifelse(in_vie, (abs(t.chosen_one[['vietor']] - t.train_set[[j,'vietor']]) * 100 / scale.scale[['vietor']]) * pod_vie, 0)\n                    #     # + \n                    #     #   ifelse(in_vlh, (abs(t.chosen_one[['vlhkost']] - t.train_set[[j,'vlhkost']]) * 100 / scale.scale[['vlhkost']]) * pod_vlh, 0)\n                    #     # +\n                    #     #   ifelse(in_tla, (abs(t.chosen_one[['tlak']] - t.train_set[[j,'tlak']]) * 100 / scale.scale[['tlak']]) * pod_tla, 0)\n                    #     +\n                    #       ifelse(in_dlz, (abs(t.chosen_one[['dlzkadna']] - t.train_set[[j,'dlzkadna']]) * 100 / scale.scale[['dlzkadna']]) * pod_dlz, 0)\n                    #     # +\n                    #     #   ifelse(in_azi, (abs(t.chosen_one[['azim']] - t.train_set[[j,'azim']]) * 100 / scale.scale[['azim']]) * pod_azi, 0)\n                    #     # +\n                    #     #   ifelse(in_ele, (abs(t.chosen_one[['elev']] - t.train_set[[j,'elev']]) * 100 / scale.scale[['elev']]) * pod_ele, 0)\n                    #   ) \n                    # }\n                    # \n                    # t.train_set['diff'] <- t.differ\n                    # t.ordered <- arrange(t.train_set, t.train_set[,'diff'])\n                    # t.train_set <- t.ordered[1:i.tn_velkost,]\n                    \n\n                    actual <- vector.add(actual, t.chosen_one[1,'praca'])\n                    \n                    forest <- randomForest(formula, data=t.train_set, ntree = i.ntree, mtry = i.mtry, importance=TRUE, proximity=TRUE)\n                    output <-  vector.add(output, predict(forest, t.chosen_one[1,3:ncol(t.chosen_one)], type=\"response\", norm.votes=TRUE))\n                    #plot(f.forest, type=\"l\")\n                    \n                    prog.i <- prog.i + 1\n                    # prog.print_perc_part <- (i * 100 / prog.basePart)\n                    prog.print_perc_all <- (prog.i * 100 / prog.baseAll)\n                    if (prog.print_perc_all >= prog.printed_all + prog.diff) {\n                      prog.actual_time <- as.numeric(difftime(Sys.time(), time.start, units = \"sec\"))\n                      prog.estimated_time <- prog.actual_time * 100 / prog.print_perc_all\n                      print(sprintf(\"Forest perc: %6.2f%s, num: %7.d/%d, Estimated time: %s, Actual: %s\",\n                                    prog.print_perc_all, \"%\", prog.i, prog.baseAll,\n                                    format.time(prog.estimated_time),\n                                    format.time(prog.actual_time)),\n                            quote=F)\n                      prog.printed_all <- prog.print_perc_all\n                    }\n                  }\n                  \n                  # statistika presnosti\n                  stats <- all_statistics(actual, output)\n                  if (write_results) {\n                    if (exists(\"db.con\")) dbDisconnect(db.con)\n                    db.con <- getConnection(db.drv)\n                    db.result <- dbGetQuery(db.con, build_insert_stats(e, stats, time.start, i.fve))\n                    dbDisconnect(db.con)\n                    #print(\"insert\")\n                  }\n                  \n                  \n                } # for (i.mtry in e.mtry)\n                \n              } # for (i.ntree in e.ntree)\n              \n            } # for (i.tn_velkost in e.tm_velkost)\n            \n          } #for (i.fve in e.fve)\n          \n        } # for (i.pod_dlz in e.pod_dlz)\n        \n      } # for (i.pod_vie in e.pod_vie)\n      \n    } # for (i.pod_tep in e.pod_tep)\n    \n  } # for (i.pod_obl in e.pod_obl)\n  \n} # for (i.pod_gho in e.pod_gho)\n\n\ntime.end <- Sys.time()\nprint(sprintf(\"Start: %s, End: %s, Duration: %s\",\n              time.start, time.end, \n              format.time(difftime(time.end, time.start, units = \"sec\"))),\n      quote = F)\n\nregisterDoSEQ()\n\nif (exists(\"db.con\")) dbDisconnect(db.con)\ndbUnloadDriver(db.drv)\n\n",
    "created" : 1460279062407.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2627307832",
    "id" : "C9C08127",
    "lastKnownWriteTime" : 1460227080,
    "last_content_update" : 1460227080,
    "path" : "~/GitHub/baka/R source/project/rf_den_testy.R",
    "project_path" : "rf_den_testy.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}