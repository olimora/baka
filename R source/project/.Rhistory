source('~/GitHub/baka/R source/project/functions.R')
source('~/GitHub/baka/R source/project/functions.R')
source('~/GitHub/baka/R source/project/functions.R')
source('~/GitHub/baka/R source/project/functions.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
dbDisconnect(db.con)
dbDisconnect(db.con)
dbDisconnect(db.con)
dbDisconnect(db.con)
source('~/GitHub/baka/R source/project/prediction_script_01.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
db.result <- dbGetQuery(db.con, build_insert_stats.neur(e, n.stats, time.start, fve))
#build insert neur stats
build_insert_stats.neur <- function(e, stats.neur, time, fve) {
ret <- sprintf("INSERT INTO t_experiment (cas_behu, in_gho, in_teplota, in_vietor, in_oblacnost,
in_vlhkost, in_tlak, in_azim, in_zen, in_elev, in_dlzkadna, den_hod, fve,
tren_mnoz, tren_mnoz_velkost, tren_mnoz_select, tren_mnoz_opis,
neural, neural_layers, neural_threshold, neural_algorithm, neural_startweights,
N, MBE, RMBE, RMSE, RRMSE, MAE, RMAE, MPE, MAXAE, SD)
VALUES ('%s', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, '%s', '%s',
'%s', %d, '%s', '%s', %s, '%s', %f, '%s', '%s',
%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s');",
time, e$gho, e$teplota, e$vietor, e$oblacnost, e$vlhkost, e$tlak,
e$azim, e$zen, e$elev, e$dlzkadna, e$den_hod, e$fve[fve],
e$tren_mnoz, e$tren_mnoz_velkost, gsub("'", '"', e$tren_mnoz_select), e$tren_mnoz_opis,
e$neural, e$neural_layers, e$neural_threshold, e$neural_algorithm,
as.character(e$neural_startweights),
stats.neur$N, stats.neur$MBE, stats.neur$RMBE, stats.neur$RMSE, stats.neur$RRMSE,
stats.neur$MAE, stats.neur$RMAE, stats.neur$MPE, stats.neur$MAXAE, stats.neur$SD)
fve <- fve
return(ret)
}
build_insert_stats.neur <- cmpfun(build_insert_stats.neur)
db.result <- dbGetQuery(db.con, build_insert_stats.neur(e, n.stats, time.start, fve))
build_insert_stats.forest <- function(e, stats.forest, time, fve) {
ret <- sprintf("INSERT INTO t_experiment (cas_behu, in_gho, in_teplota, in_vietor, in_oblacnost,
in_vlhkost, in_tlak, in_azim, in_zen, in_elev, in_dlzkadna, den_hod, fve,
tren_mnoz, tren_mnoz_velkost, tren_mnoz_select, tren_mnoz_opis,
forest, forest_ntree, forest_mtry,
N, MBE, RMBE, RMSE, RRMSE, MAE, RMAE, MPE, MAXAE, SD)
VALUES ('%s', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, '%s', '%s',
'%s', %d, '%s', '%s', %s, %d, %d,
%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s');",
time, e$gho, e$teplota, e$vietor, e$oblacnost, e$vlhkost, e$tlak,
e$azim, e$zen, e$elev, e$dlzkadna, e$den_hod, e$fve[fve],
e$tren_mnoz, e$tren_mnoz_velkost, gsub("'", '"', e$tren_mnoz_select), e$tren_mnoz_opis,
e$forest, e$forest_mtry, e$forest_ntree,
stats.forest$N, stats.forest$MBE, stats.forest$RMBE, stats.forest$RMSE, stats.forest$RRMSE,
stats.forest$MAE, stats.forest$RMAE, stats.forest$MPE, stats.forest$MAXAE, stats.forest$SD)
fve <- fve
return(ret)
}
build_insert_stats.forest <- cmpfun(build_insert_stats.forest)
source('~/GitHub/baka/R source/project/functions.R')
source('~/GitHub/baka/R source/project/prediction_script_01.R')
View(compute_weigths_num)
source('~/GitHub/baka/R source/project/functions.R')
View(compute_weigths_num)
View(compute_weigths_numm)
View(compute_weigths_num)
e$fve <- c("FVE Dubravy 1", "FVE Dubravy 2", "FVE Plesivec")[2]
e.fve <- e$fve
e <- list()
e$fve <- c("FVE Dubravy 1", "FVE Dubravy 2", "FVE Plesivec")[2]
e.fve <- e$fve
1:length(e.fve)
e.fve[fve]
e.fve[1]
e <- list()
e$gho <- TRUE
e$teplota <- TRUE
e$vietor <- TRUE
e$oblacnost <- TRUE
e$vlhkost <- TRUE
e$tlak <- F
e$azim <- F
e$zen <- F
e$elev <- TRUE
e$dlzkadna <- TRUE
e$den_hod <- c("den", "hod")[1]
e$fve <- c("FVE Dubravy 1", "FVE Dubravy 2", "FVE Plesivec")[2]
e.fve <- e$fve
e$tren_mnoz <- "najpodobnejsich 60"
e$tren_mnoz_velkost <- 60
e.tren_mnoz_velkost <- e$tren_mnoz_velkost
e$tren_mnoz_select <- "select datum, sum(praca) praca, sum(gho) gho, sum(teplota) teplota, sum(vietor) vietor,
sum(oblacnost) oblacnost, sum(vlhkost) vlhkost, max(dlzkadna) dlzkadna, max(elev) elev
from v_data where fve_nazov = '%s'group by datum order by datum"
e.tren_mnoz_select <- e$tren_mnoz_select
e$tren_mnoz_opis <- "vyber 60 najpodobnejsich dni podla scitaneho gho, teploty, vetra, oblacnosti, vlhkosti,
maximalnej dlzky dna a elevacie.
normalizovane na rozsah(skalu) medzi min a max za vsetky data elektrarne.
gho * 90, teplota * 10, vietor * 1, oblacnost * 100, vlhkost * 0.5, dlzkadna * 10, elev * 10"
e$neural <- TRUE
e$neural_layers <- "c(3,2)"
e.neural_layers <- unq(e$neural_layers)
e$neural_threshold <- 0.01  #0.01 default
e.neural_threshold <- e$neural_threshold
e$neural_algorithm <- c("backprop", "rprop+", "rprop-", "sag", "slr")[2] # default je rprop+
e.neural_algorithm <- e$neural_algorithm
e$neural_startweights <- "rep(1, n.pocet_vah) # vektor jednotiek"
e.neural_startweights <- e$neural_startweights
e$forest <- TRUE
e$forest_ntree <- 0 # 0 ak default
e.forest_ntree <- e$forest_ntree
e$forest_mtry <- 0 # 0 ak default
e.forest_mtry <- e$forest_mtry
n.input_v <- c(e$gho, e$teplota, e$vietor, e$oblacnost, e$vlhkost, e$tlak, e$azim, e$zen, e$elev, e$dlzkadna)
n.input_v
length(subset(n.input_v, n.input_v == TRUE))
n.input_v <- c(e$gho, e$teplota, e$vietor, e$oblacnost, e$vlhkost, e$tlak, e$azim, e$zen, e$elev, e$dlzkadna)
n.pocet_vah <- compute_weigths_num(length(subset(n.input_v, n.input_v == TRUE)), e.neural_layers)
source('~/GitHub/baka/R source/project/functions.R')
n.input_v <- c(e$gho, e$teplota, e$vietor, e$oblacnost, e$vlhkost, e$tlak, e$azim, e$zen, e$elev, e$dlzkadna)
n.pocet_vah <- compute_weigths_num(length(subset(n.input_v, n.input_v == TRUE)), e.neural_layers)
e <- list()
e$gho <- TRUE
e$teplota <- TRUE
e$vietor <- TRUE
e$oblacnost <- TRUE
e$vlhkost <- TRUE
e$tlak <- F
e$azim <- F
e$zen <- F
e$elev <- TRUE
e$dlzkadna <- TRUE
e$den_hod <- c("den", "hod")[1]
e$fve <- c("FVE Dubravy 1", "FVE Dubravy 2", "FVE Plesivec")[2]
e.fve <- e$fve
e$tren_mnoz <- "najpodobnejsich 60"
e$tren_mnoz_velkost <- 60
e.tren_mnoz_velkost <- e$tren_mnoz_velkost
e$tren_mnoz_select <- "select datum, sum(praca) praca, sum(gho) gho, sum(teplota) teplota, sum(vietor) vietor,
sum(oblacnost) oblacnost, sum(vlhkost) vlhkost, max(dlzkadna) dlzkadna, max(elev) elev
from v_data where fve_nazov = '%s'group by datum order by datum"
e.tren_mnoz_select <- e$tren_mnoz_select
e$tren_mnoz_opis <- "vyber 60 najpodobnejsich dni podla scitaneho gho, teploty, vetra, oblacnosti, vlhkosti,
maximalnej dlzky dna a elevacie.
normalizovane na rozsah(skalu) medzi min a max za vsetky data elektrarne.
gho * 90, teplota * 10, vietor * 1, oblacnost * 100, vlhkost * 0.5, dlzkadna * 10, elev * 10"
e$neural <- TRUE
e$neural_layers <- "c(7,5,3)"
e.neural_layers <- unq(e$neural_layers)
e$neural_threshold <- 0.01  #0.01 default
e.neural_threshold <- e$neural_threshold
e$neural_algorithm <- c("backprop", "rprop+", "rprop-", "sag", "slr")[2] # default je rprop+
e.neural_algorithm <- e$neural_algorithm
e$neural_startweights <- "rep(1, n.pocet_vah) # vektor jednotiek"
e.neural_startweights <- e$neural_startweights
e$forest <- TRUE
e$forest_ntree <- 0 # 0 ak default
e.forest_ntree <- e$forest_ntree
e$forest_mtry <- 0 # 0 ak default
e.forest_mtry <- e$forest_mtry
n.input_v <- c(e$gho, e$teplota, e$vietor, e$oblacnost, e$vlhkost, e$tlak, e$azim, e$zen, e$elev, e$dlzkadna)
n.pocet_vah <- compute_weigths_num(length(subset(n.input_v, n.input_v == TRUE)), e.neural_layers)
n.pocet_vah
if (exists("db.con")) dbDisconnect(db.con)
db.con <- getConnection(db.drv)
t.all_days <- dbGetQuery(db.con, sprintf(e.tren_mnoz_select, e.fve[fve]))
dbDisconnect(db.con)
db.con <- getConnection(db.drv)
t.all_days <- dbGetQuery(db.con, sprintf(e.tren_mnoz_select, e.fve[fve]))
dbDisconnect(db.con)
db.con <- getConnection(db.drv)
t.all_days <- dbGetQuery(db.con, sprintf(e.tren_mnoz_select, e.fve[fve]))
dbDisconnect(db.con)
db.con <- getConnection(db.drv)
t.all_days <- dbGetQuery(db.con, sprintf(e.tren_mnoz_select, e.fve[fve]))
db.drv <- dbDriver("PostgreSQL")
if (exists("db.con")) dbDisconnect(db.con)
db.con <- getConnection(db.drv)
t.all_days <- dbGetQuery(db.con, sprintf(e.tren_mnoz_select, e.fve[fve]))
dbDisconnect(db.con)
if (exists("db.con")) dbDisconnect(db.con)
db.con <- getConnection(db.drv)
t.all_days <- dbGetQuery(db.con, sprintf(e.tren_mnoz_select, e.fve[1]))
dbDisconnect(db.con)
View(t.all_days)
scale.maxims <- c(max(t.all_days[,3]), max(t.all_days[,4]), max(t.all_days[,5]),
max(t.all_days[,6]), max(t.all_days[,7]), max(t.all_days[,8]), max(t.all_days[,9]))
scale.minims <- c(min(t.all_days[,3]), min(t.all_days[,4]), min(t.all_days[,5]),
min(t.all_days[,6]), min(t.all_days[,7]), min(t.all_days[,8]), min(t.all_days[,9]))
scale.scale <- abs(scale.maxims - scale.minims)
t.actual <- c()
n.output <- c()
f.output <- c()
t.all_days_count <- nrow(t.all_days)
prog.basePart <- t.all_days_count
prog.printed <- -10
i = 1
t.chosen_one <- t.all_days[i,]
t.not_i <- c(i != c(1:t.all_days_count))
t.train_set <- t.all_days[t.not_i,]
# vypocitat podobnost
t.differ <- c()
for (j in 1:nrow(t.train_set)) { #nrow(t.train_set)
t.differ[j] <- (
90 * (abs(t.chosen_one['gho'] - t.train_set[j,'gho']) * 100 / scale.scale[1])
+
10 * (abs(t.chosen_one['teplota'] - t.train_set[j,'teplota']) * 100 / scale.scale[2])
+
(abs(t.chosen_one['vietor'] - t.train_set[j,'vietor']) * 100 / scale.scale[3])
+
100 * (abs(t.chosen_one['oblacnost'] - t.train_set[j,'oblacnost']) * 100 / scale.scale[4])
+
0.5 * (abs(t.chosen_one['vlhkost'] - t.train_set[j,'vlhkost']) * 100 / scale.scale[5])
+
10 * (abs(t.chosen_one['dlzkadna'] - t.train_set[j,'dlzkadna']) * 100 / scale.scale[6])
+
10 * (abs(t.chosen_one['elev'] - t.train_set[j,'elev']) * 100 / scale.scale[7])
)
}
t.train_set['diff'] <- unlist(t.differ)
#t.train_set <- t.train_set[c(t.train_set[,6] < 3),]
#print(nrow(t.train_set))
View(t.train_set)
t.ordered <- arrange(t.train_set, t.train_set[,'diff'])
t.train_set <- t.ordered[1:e.tren_mnoz_velkost,]
t.actual <- vector.add(t.actual, t.chosen_one[1,'praca'])
View(t.ordered)
View(t.chosen_one)
View(t.ordered)
View(t.train_set)
t.chosen_one[1,2:4
]
t.chosen_one[1,3:7]
t.chosen_one[1,3:9]
t.chosen_one[1,3:ncol(t.chosen_one) - 1]
t.chosen_one[1,3:ncol(t.chosen_one)]
sqrt(3)
sqrt(7)
source('~/GitHub/baka/R source/project/prediction_script_02.R')
print(sprintf("Progress: %.02f%s all, FVE(%d): %.02f%s, Estimated time: %s, Actual: %s",
prog.print_perc_all, "%", fve, prog.print_perc, "%",
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
> print(sprintf("Progress: %00.02f%s all, FVE(%d): %.02f%s, Estimated time: %s, Actual: %s",
+                     0.23456, "%", fve, prog.print_perc, "%",
+                     format.time(prog.estimated_time),
+                     format.time(prog.actual_time)),
+             quote=F)
print(sprintf("Progress: %.2f%s all, FVE(%d): %.2f%s, Estimated time: %s, Actual: %s",
prog.print_perc_all, "%", fve, prog.print_perc, "%",
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
print(sprintf("Progress: %2.2f%s all, FVE(%d): %2.2f%s, Estimated time: %s, Actual: %s",
prog.print_perc_all, "%", fve, prog.print_perc, "%",
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
print(sprintf("Progress: %3.2f%s all, FVE(%d): %2.2f%s, Estimated time: %s, Actual: %s",
prog.print_perc_all, "%", fve, prog.print_perc, "%",
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
print(sprintf("Progress: %02f%s all, FVE(%d): %02f%s, Estimated time: %s, Actual: %s",
prog.print_perc_all, "%", fve, prog.print_perc, "%",
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
print(sprintf("Progress: %02.f%s all, FVE(%d): %02.f%s, Estimated time: %s, Actual: %s",
prog.print_perc_all, "%", fve, prog.print_perc, "%",
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
print(sprintf("Progress: %03.f%s all, FVE(%d): %02.f%s, Estimated time: %s, Actual: %s",
prog.print_perc_all, "%", fve, prog.print_perc, "%",
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
sprintf("aa %s bb", 5.8)
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
for (ntree_i in c(100, 200, 300, 400, 500, 600, 700)) {
for (mtry_i in 3:7) {
for (tren_velk_i in c(20, 40, 60, 80, 100, 120)) {
sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i)
}
}
}
}
for (ntree_i in c(100, 200, 300, 400, 500, 600, 700)) {
for (mtry_i in 3:7) {
for (tren_velk_i in c(20, 40, 60, 80, 100, 120)) {
print(sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i))
}
}
}
for (ntree_i in c(100, 200, 300, 400, 500, 600, 700)) {
for (mtry_i in 3:7) {
for (tren_velk_i in c(20, 40, 60, 80, 100, 120)) {
print(sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i))
}
}
}
print(ntree_i * mtry_i * tren_velk_i)
for (ntree_i in c(100, 300, 500, 700)) {
for (mtry_i in 3:7) {
for (tren_velk_i in c(20, 40, 60, 80, 100, 120)) {
print(sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i))
}
}
}
print(ntree_i * mtry_i * tren_velk_i)
ntree_v <- c(100, 200, 300, 400, 500, 600, 700)
mtry_v <- c(3:7)
tren_velk_v <- c(20, 40, 60, 80, 100, 120)
for (ntree_i in ntree_v) {
for (mtry_i in mtry_v) {
for (tren_velk_i in tren_velk_v) {
print(sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i))
}
}
}
print(length(ntree_v) * length(mtry_v) * length(tren_velk_v))
tren_velk_v <- c(20, 40, 60, 80, 100, 120)
ntree_v <- c(100, 300, 500, 700)
mtry_v <- c(3:7)
tren_velk_v <- c(20, 40, 60, 80, 100, 120)
for (ntree_i in ntree_v) {
for (mtry_i in mtry_v) {
for (tren_velk_i in tren_velk_v) {
print(sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i))
}
}
}
print(length(ntree_v) * length(mtry_v) * length(tren_velk_v))
ntree_v <- c(100, 300, 500, 700)
mtry_v <- c(3:7)
tren_velk_v <- c(30, 60, 90, 120)
for (ntree_i in ntree_v) {
for (mtry_i in mtry_v) {
for (tren_velk_i in tren_velk_v) {
print(sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i))
}
}
}
print(length(ntree_v) * length(mtry_v) * length(tren_velk_v))
ntree_v
length(ntree_v)
length(mtry_v)
length(tren_velk_v)
ntree_v <- c(100, 300, 500, 700)
mtry_v <- c(3:6)
tren_velk_v <- c(30, 60, 90, 120)
for (ntree_i in ntree_v) {
for (mtry_i in mtry_v) {
for (tren_velk_i in tren_velk_v) {
print(sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i))
}
}
}
print(length(ntree_v) * length(mtry_v) * length(tren_velk_v))
ntree_v <- c(100, 300, 500)
mtry_v <- c(3:7)
tren_velk_v <- c(30, 60, 90)
for (ntree_i in ntree_v) {
for (mtry_i in mtry_v) {
for (tren_velk_i in tren_velk_v) {
print(sprintf("ntree: %s, mtry: %s, tren_velk: %s", ntree_i, mtry_i, tren_velk_i))
}
}
}
print(length(ntree_v) * length(mtry_v) * length(tren_velk_v))
source('~/GitHub/baka/R source/project/prediction_script_03.R')
prog.baseAll <- dbGetQuery(db.con, "SELECT count(*) FROM
(SELECT DISTINCT datum, fve FROM t_produkcia WHERE fve = 3) s")
db.con <- getConnection(db.drv)
prog.baseAll <- dbGetQuery(db.con, "SELECT count(*) FROM
(SELECT DISTINCT datum, fve FROM t_produkcia WHERE fve = 3) s")
prog.baseAll
source('~/GitHub/baka/R source/project/prediction_script_03.R')
prog.baseAll <- 200 * 45
dbDisconnect(db.con)
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
e$tren_mnoz <- sprintf("najpodobnejsich %d", tren_velk_i)
e$tren_mnoz_velkost <- tren_velk_i
e.tren_mnoz_velkost <- tren_velk_i
e$tren_mnoz
f.forest <- randomForest(formula, data=t.train_set, importance=TRUE, proximity=TRUE, ntree = ntree_i, mtry = mtry_i)
f.output <-  vector.add(f.output, predict(f.forest, t.chosen_one[1,3:ncol(t.chosen_one)], type="response", norm.votes=TRUE))
f.output
source('~/GitHub/baka/R source/project/prediction_script_03.R')
dbDisconnect(db.con)
dbDisconnect(db.con)
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
db.drv <- dbDriver("PostgreSQL")
source('~/GitHub/baka/R source/project/prediction_script_03.R')
db.con <- getConnection(db.drv)
dbDisconnect(db.con)
source('~/GitHub/baka/R source/project/prediction_script_03.R')
prog.baseAll
length(ntree_v) * length(mtry_v) * length(tren_velk_v)
c(c(7,5,3), c(7,7,5,3))
source('~/.active-rstudio-document')
c(c(7,5,3), c(7,7,5,3))[2]
cbind(c(7,5,3), c(7,7,5,3))
cbind2(c(7,5,3), c(7,7,5,3))
ll <- list()
ll$1 <- c(7,5,3)
ll <- list()
ll$a <- c(7,5,3)
ll$b <- c(7,7,5,3)
ll[2]
for (q in ll) {
print(q)
}
source('~/GitHub/baka/R source/project/prediction_script_03.R')
length(ntree_v) * length(mtry_v) * length(tren_velk_v) * 100
ntree_v <- c(100, 300, 500)
mtry_v <- c(3:7)
tren_velk_v <- c(20, 40, 60, 80, 100)
length(ntree_v) * length(mtry_v) * length(tren_velk_v) * 100
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
runif(100, 1, nrow(t.train_set))
round(runif(100, 1, nrow(t.train_set)), 0)
if (5 %in% c(5, 6)) {print("a")}
if (!5 %in% c(5, 6)) {print("a")}
rand_vec <- c()
while (length(rand_vec) <= 100) {
rand <- round(runif(1, 1, nrow(t.train_set)), 0)
if (!rand %in% rand_vec) {
rand_vec <- vector.add(rand_vec, rand)
}
}
rand_vec
length(rand_vec)
rand_vec <- c()
while (length(rand_vec) < 100) {
rand <- round(runif(1, 1, nrow(t.train_set)), 0)
if (!rand %in% rand_vec) {
rand_vec <- vector.add(rand_vec, rand)
}
}
rand_vec
length(rand_vec)
View(t.train_set)
t.train_set <- t.train_set[rand_vec,]
View(t.train_set)
vzorka <- 100
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
f.stats
t.actual
f.output
print(sprintf("Progress: %03.2f%s all, FVE(%d): %03.2f%s, Estimated time: %s, Actual: %s",
prog.print_perc_all, "%", fve, prog.print_perc, "%",
format.time(prog.estimated_time),
format.time(prog.actual_time)),
quote=F)
t.chosen_one[1,'praca']
i
f.stats <- all_statistics(t.actual, f.output)
t.actual
f.output
f.forest
f.output <-  vector.add(f.output, predict(f.forest, t.chosen_one[1,3:ncol(t.chosen_one)], type="response", norm.votes=TRUE))
f.forest <- randomForest(formula, data=t.train_set, ntree = e.forest_ntree, mtry = e.forest_mtry,
importance=TRUE, proximity=TRUE)
View(t.ordered)
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
prog.baseAll
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
View(t.all_days)
View(t.all_days)
t.all_days[1,]
?subset
subset(all_days_zaloha, 'datum' != t.chosen_one['datum'])
t.all_days <- dbGetQuery(db.con, sprintf(e.tren_mnoz_select, e.fve[fve]))
db.con <- getConnection(db.drv)
t.all_days <- dbGetQuery(db.con, sprintf(e.tren_mnoz_select, e.fve[fve]))
all_days_zaloha <- t.all_days
subset(all_days_zaloha, 'datum' != t.chosen_one['datum'])
t.train_set <- subset(all_days_zaloha, all_days_zaloha[,'datum'] != t.chosen_one['datum'])
c(t.chosen_one['datum'] != all_days_zaloha[,'datum'])
c(t.chosen_one[1,'datum'] != all_days_zaloha[,'datum'])
t.not_i <- c(t.chosen_one[1,'datum'] != all_days_zaloha[,'datum'])
t.train_set <- all_days_zaloha[t.not_i,]
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
source('~/GitHub/baka/R source/project/prediction_script_03.R')
f.forest
