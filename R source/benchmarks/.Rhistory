edt <- stt + 35000
prva <- function(x,y) {
format.time(as.numeric(difftime(x, y, units = "sec")))
}
druha <- function(x) {
ft(as.numeric(difftime(x, y, units = "sec")))
}
compare <- microbenchmark(prva(stt,edt), druha(stt,edt), times = 10000)
library(ggplot2)
autoplot(compare)
stt <- Sys.time()
edt <- stt + 35000
prva <- function(x,y) {
format.time(as.numeric(difftime(x, y, units = "sec")))
}
druha <- function(x,y) {
ft(as.numeric(difftime(x, y, units = "sec")))
}
compare <- microbenchmark(prva(stt,edt), druha(stt,edt), times = 10000)
library(ggplot2)
autoplot(compare)
stt <- Sys.time()
edt <- stt + 35000
prva <- function(x,y) {
format.time(as.numeric(difftime(x, y, units = "sec")))
}
druha <- function(x,y) {
ft(as.numeric(difftime(x, y, units = "sec")))
}
compare <- microbenchmark(prva(stt,edt), druha(stt,edt), times = 10000)
library(ggplot2)
autoplot(compare)
all_s <- cmpfun(all_statistics)
act <- runif(10 , 100, 2000)
pred <- runif(10 , 100, 2000)
prva <- function(x,y) {
all_statistics(act,pred)
}
druha <- function(x,y) {
all_s(act,pred)
}
compare <- microbenchmark(prva(act,pred), druha(act,pred), times = 1000)
library(ggplot2)
autoplot(compare)
library("Metrics")
act <- runif(10 , 100, 2000)
pred <- runif(10 , 100, 2000)
prva <- function(x,y) {
all_statistics(act,pred)
}
druha <- function(x,y) {
all_s(act,pred)
}
compare <- microbenchmark(prva(act,pred), druha(act,pred), times = 1000)
library(ggplot2)
autoplot(compare)
library(Metrics)
library(sirad)
act <- runif(10 , 100, 2000)
pred <- runif(10 , 100, 2000)
prva <- function(x,y) {
all_statistics(act,pred)
}
druha <- function(x,y) {
all_s(act,pred)
}
compare <- microbenchmark(prva(act,pred), druha(act,pred), times = 1000)
library(ggplot2)
autoplot(compare)
act <- runif(1000 , 100, 2000)
pred <- runif(1000 , 100, 2000)
prva <- function(x,y) {
all_statistics(act,pred)
}
druha <- function(x,y) {
all_s(act,pred)
}
compare <- microbenchmark(prva(act,pred), druha(act,pred), times = 1000)
library(ggplot2)
autoplot(compare)
cmp_weigths_num <- cmpfun(compute_weigths_num)
act <- 3
pred <- c(3,2)
prva <- function(x,y) {
compute_weigths_num(x, y)
}
druha <- function(x,y) {
cmp_weigths_num(x, y)
}
compare <- microbenchmark(prva(act,pred), druha(act,pred), times = 1000)
library(ggplot2)
autoplot(compare)
try <- function(train_set) {
print(train_set)
}
druha <- function(tr) {
for (i in 1:length(tr)) {
print(tr[i])
}
}
library(microbenchmark)
library(compiler)
compare <- microbenchmark(try(c(1:100)), druha(c(1:100)), times = 1000)
try <- function(train_set) {
print(train_set)
invisible()
}
druha <- function(tr) {
for (i in 1:length(tr)) {
print(tr[i])
}
invisible()
}
compare <- microbenchmark(try(c(1:100)), druha(c(1:100)), times = 1000)
library(ggplot2)
autoplot(compare)
try <- function(train_set) {
print(train_set)
invisible()
}
tryy <- cmpfun(try)
druha <- function(tr) {
for (i in 1:length(tr)) {
print(tr[i])
}
invisible()
}
compare <- microbenchmark(try(c(1:100)), druha(c(1:100)), times = 1000)
compare <- microbenchmark(tryy(c(1:100)), try(c(1:100)), druha(c(1:100)), times = 1000)
library(ggplot2)
autoplot(compare)
library(doParallel)
install.packages("doParallel")
library(doParallel)
detectCores()
doParallel::detectCores()
library(foreach)
cl <- makeCluster(detectCores(), type='PSOCK')
library(doParallel)
install.packages("foreach")
library(foreach)
library(doParallel)
detectCores()
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
compare <- microbenchmark(tryy(c(1:100)), try(c(1:100)), druha(c(1:100)), times = 1000)
library(ggplot2)
autoplot(compare)
z <- c(1:100)
registerDoSEQ()
compare <- microbenchmark(tryy(z), try(z), druha(z), times = 1000)
library(ggplot2)
autoplot(compare)
registerDoSEQ()
compare <- microbenchmark(tryy(z), try(z), druha(z), times = 1000)
library(ggplot2)
autoplot(compare)
z <- c(1:100)
prva <- function(x) {
lapply(x, print())
}
druha <- function(tr) {
for (i in 1:length(tr)) {
print(tr[i])
}
invisible()
}
compare <- microbenchmark(prva(z), tryy(z), try(z), druha(z), times = 1000)
library(ggplot2)
autoplot(compare)
prva <- function(x) {
lapply(x, print)
}
druha <- function(tr) {
for (i in 1:length(tr)) {
print(tr[i])
}
invisible()
}
compare <- microbenchmark(prva(z), tryy(z), try(z), druha(z), times = 1000)
library(ggplot2)
autoplot(compare)
system.time(prva(z))
system.time(druha(z))
z <- c(1:10000)
system.time(prva(z))
system.time(druha(z))
z <- c(1:1000000)
system.time(prva(z))
z <- c(1:10000)
system.time(prva(z))
system.time(druha(z))
system.time(druha(z))
system.time(druha(z))
system.time(druha(z))
system.time(prva(z))
system.time(prva(z))
system.time(prva(z))
compare
z <- c(1:1000)
z <- c(1:1000)
prva <- function(x) {
lapply(x, print)
}
druha <- function(tr) {
clusterApply(tr, print)
}
system.time(prva(z))
system.time(prva(z))
system.time(prva(z))
system.time(prva(z))
system.time(druha(z))
system.time(druha(z))
compare <- microbenchmark(prva(z), times = 1000)
compare <- microbenchmark(prva(z), times = 10)
autoplot(compare)
compare <- microbenchmark(prva(z), times = 10)
autoplot(compare)
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoSEQ()
z <- c(1:10000)
prva <- function(x) {
lapply(x, print)
}
druha <- function(tr) {
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
clusterApply(tr, print)
registerDoSEQ()
}
system.time(prva(z))
system.time(druha(z))
compare <- microbenchmark(prva(z), times = 1)
autoplot(compare)
f <- function(d) {
d <- 548 * 3655 / 822
return(d)
}
f <- function(d) {
d <- 548 * 3655 / 822
return(d)
}
z <- c(1:10000)
f <- function(d) {
d <- 548 * 3655 / 822
return(d)
}
prva <- function(x) {
lapply(x, f)
}
druha <- function(tr) {
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
clusterApply(tr, f)
registerDoSEQ()
}
system.time(prva(z))
system.time(druha(z))
z <- c(1:1000000)
system.time(prva(z))
system.time(prva(z))
system.time(prva(z))
system.time(prva(z))
system.time(prva(z))
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
system.time(prva(z))
system.time(prva(z))
system.time(prva(z))
system.time(prva(z))
library(snow)
z <- c(1:10)
system.time(lapply(z, function(x) Sys.sleep(1)))
cl<-makeCluster(4,type="SOCK")
system.time(clusterApply(cl, z,function(x) Sys.sleep(1)))
stopCluster(cl)
z <- c(1:10000)
system.time(lapply(z, d))
cl<-makeCluster(4,type="SOCK")
system.time(clusterApply(cl, z, d))
stopCluster(cl)
z <- c(1:10000)
system.time(lapply(z, f(d)))
cl<-makeCluster(4,type="SOCK")
system.time(clusterApply(cl, z, f(d)))
stopCluster(cl)
fff <- function(d) {
d <- 548 * 3655 / 822
}
z <- c(1:10000)
system.time(lapply(z, f))
cl<-makeCluster(4,type="SOCK")
system.time(clusterApply(cl, z, f))
stopCluster(cl)
z <- c(1:10000)
system.time(lapply(z, f))
cl<-makeCluster(4,type="SOCK")
system.time(clusterApply(cl, z, f))
stopCluster(cl)
compare <- microbenchmark(f(z), times = 1000)
compare
compare <- microbenchmark(f(z), times = 1000)
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
compare2 <- microbenchmark(f(z), times = 1000)
registerDoSEQ()
compare
compare2
compare <- microbenchmark(f(z), times = 100000)
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
compare2 <- microbenchmark(f(z), times = 100000)
registerDoSEQ()
compare
compare2
fff <- function(d) {
d <- 548 * 3655 / 9413 + 84205 * 88522 / 822
}
compare <- microbenchmark(fff(z), times = 100000)
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
compare2 <- microbenchmark(fff(z), times = 100000)
registerDoSEQ()
compare
compare2
compare <- microbenchmark(lapply(z, fff), times = 100000)
z <- c(1:1000)
compare <- microbenchmark(lapply(z, fff), times = 1000)
cl<-makeCluster(4,type="SOCK")
compare2 <- microbenchmark(clusterApply(cl, z, fff), times = 1000)
stopCluster(cl)
system.time(clusterApply(cl, z, fff))
cl<-makeCluster(4,type="SOCK")
system.time(clusterApply(cl, z, fff))
system.time(clusterApply(cl, z, fff))
system.time(clusterApply(cl, z, fff))
system.time(clusterApply(cl, z, fff))
system.time(clusterApply(cl, z, fff))
system.time(clusterApply(cl, z, fff))
system.time(lapply(z, fff))
system.time(lapply(z, fff))
system.time(lapply(z, fff))
system.time(lapply(z, fff))
system.time(lapply(z, fff))
train_set <- dataframe(praca = as.numeric(runif(10, 1, 100)),
gho = as.numeric(runif(10, 1, 100)),
obl = as.numeric(runif(10, 1, 100)))
train_set <- data.frame(praca = as.numeric(runif(10, 1, 100)),
gho = as.numeric(runif(10, 1, 100)),
obl = as.numeric(runif(10, 1, 100)))
View(train_set)
chosen_one <- data.frame(praca = 50, gho = 50, obl = 50)
View(chosen_one)
scale <- c(praca = 100, gho = 100, obl = 100)
scale
try <- function(cho, tr, pod_prac, pod_gho, pod_obl, scale) {
ret <- (abs(cho[['praca']] - tr[['praca']]) * 100 / scale[['praca']])
+
(abs(cho[['gho']] - tr[['gho']]) * 100 / scale[['gho']])
+
(abs(cho[['obl']] - tr[['obl']]) * 100 / scale[['obl']])
return (ret)
}
?apply
diff <- c(1:10)
?sapply
?apply
?sapply
diff <- apply(train_set, chosen_one, 10, 20, 30, scale)
diff <- apply(diff(train_set, chosen_one, 10, 20, 30, scale))
diff <- apply(diff, try(train_set, chosen_one, 10, 20, 30, scale))
diff <- apply(diff, try(train_set, chosen_one, 10, 20, 30, scale))
diff <- apply(diff, try)
diff <- vapply(diff, try(train_set, chosen_one, 10, 20, 30, scale))
diff <- vapply(diff, try)
try2 <- function() {
ret <- (abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']])
return (ret)
}
diff <- vapply(diff, try2)
diff <- sapply(diff, try2)
diff <- sapply(diff, try)
diff <- sapply(diff, try(chosen_one, train_set, 10, 20, 30, scale))
cbind(train_set, diff)
train_set <- cbind(train_set, diff)
try3 <- function() {
train_set[['diff']] <- (abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']])
}
res <- sapply(train, try(chosen_one, train_set, 10, 20, 30, scale))
res <- sapply(train_set, try3())
tryy <- function() {
train_set[['diff']] <- (abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']])
}
res <- sapply(train_set, try3())
tryy <- function() {
train_set[['diff']] <- (abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']])
}
res <- vapply(train_set, try3())
res <- apply(train_set, try3())
?apply
res <- apply(train_set, 1, try3())
res <- apply(train_set, 1, tryy())
res <- apply(train_set, 1, (abs(cho[['praca']] - tr[['praca']]) * 100 / scale[['praca']])
+
(abs(cho[['gho']] - tr[['gho']]) * 100 / scale[['gho']])
+
(abs(cho[['obl']] - tr[['obl']]) * 100 / scale[['obl']]) )
res <- apply(train_set, 1, (abs(cho[['praca']] - tr[['praca']]) * 100 / scale[['praca']])
+
(abs(cho[['gho']] - tr[['gho']]) * 100 / scale[['gho']])
+
(abs(cho[['obl']] - tr[['obl']]) * 100 / scale[['obl']])  )
res <- apply(train_set, 1, (abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']])  )
res <- apply(train_set, 1, abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']])
res <- apply(train_set, 1, (abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']])  )
tryy <- function() {
return((abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']]))
}
tryy <- function() {
return((abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']]))
}
res <- apply(train_set, 1, tryy)
train_set$newColumn <- apply(dataFrame, 1, function(x) { (abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']]) } )
train_set$newColumn <- apply(train_set, 1, function(x) { (abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']]) } )
View(train_set)
train_set$newColumn <- apply(train_set, 1, function(x) tryy )
View(train_set)
train_set$newColumn <- apply(train_set, 1, function(x) tryy() )
View(train_set)
tryy <- function(jebem) {
return((abs(chosen_one[['praca']] - train_set[['praca']]) * 100 / scale[['praca']])
+
(abs(chosen_one[['gho']] - train_set[['gho']]) * 100 / scale[['gho']])
+
(abs(chosen_one[['obl']] - train_set[['obl']]) * 100 / scale[['obl']]) * jebem)
}
train_set$newColumn <- apply(train_set, 1, function(x) tryy(0) )
train_set$newColumn <- apply(train_set, 1, function(x) tryy(0) )
train_set <- data.frame(praca = as.numeric(c(1:10)),
gho = as.numeric(c(1:10)),
obl = as.numeric(c(1:10)))
tryy <- function(jebem) {
return(x * jebem)
}
train_set$newColumn <- apply(train_set, 1, function(x) tryy(0) )
tryy <- function(jebem) {
return(1 * jebem)
}
train_set$newColumn <- apply(train_set, 1, function(x) tryy(0) )
View(train_set)
?bapply
?vapply
train_set$newColumn <- vapply(train_set, function(x) tryy(0) )
train_set$newColumn <- vapply(train_set, function(x) tryy(0), c() )
rep(10, 1)
rep(10, 10)
train_set$newColumn <- vapply(train_set, function(x) tryy(0), rep(1, 10) )
train_set$newColumn <- sapply(train_set, function(x) tryy(0) )
res <- sapply(train_set, function(x) tryy(0) )
?apply
train_set$diff <- apply(train_set, 1, function(x) tryy(train_set) )
train_set$diff <- apply(train_set, 1, function(x) {tryy(train_set)} )
train_set$diff <- apply(train_set, 1, function(x) { <- tryy(train_set)} )
train_set$diff <- apply(train_set, 1, function(x) tryy(train_set) )
tryy <- function(jebem) {
return(1 + 1 + 1)
}
train_set$diff <- apply(train_set, 1, function(x) tryy(train_set) )
