{
    "collab_server" : "",
    "contents" : "library(compiler)\nlibrary(Metrics)\nlibrary(sirad)\n\n\n# spajanie stringov\n`%s%` <- function(s1, s2) paste0(s1, s2)\n`%s%` <- cmpfun(`%s%`)\n\n#to compute numbers of weights\ncompute_weigths_num <- function(input, layers) {\n  ret <- 0\n  mul <- input\n  for (i in 1:length(layers)) {\n    ret <- ret + mul*layers[i] + layers[i]\n    mul <- layers[i]\n  }\n  ret <- ret + layers[length(layers)] + 1\n  return(ret)\n}\ncompute_weigths_num <- cmpfun(compute_weigths_num)\n\n#build insert stats\nbuild_insert_stats <- function(e, stats, ttime, fve) {\n  for (name in names(stats)) {\n    if (is.infinite(stats[[name]]) | !is.numeric(stats[[name]]) | is.nan(stats[[name]])) stats[[name]] <- 999.999\n  }\n  ret <- sprintf(\"INSERT INTO t_experiment (cas_behu, metoda, param1, param2, param3, param4, param5,\n                 N, MBE, RMBE, RMSE, RRMSE, MAE, RMAE, MPE, MAXAE, SD,\n                 tm_velkost, tm_opis, tm_select, fve, den_hod,\n                 pod_gho, pod_oblacnost, pod_teplota, pod_vietor, pod_vlhkost, pod_tlak, pod_dlzkadna, pod_azim, pod_elev,\n                 in_gho, in_oblacnost, in_teplota, in_vietor, in_vlhkost, in_tlak, in_dlzkadna, in_azim, in_elev)\n                 VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s',\n                 %d, %f, %f, %f, %f, %f, %f, %f, %f, %f,\n                 %d, '%s', '%s', '%s', '%s',\n                 %f, %f, %f, %f, %f, %f, %f, %f, %f,\n                 %s, %s, %s, %s, %s, %s, %s, %s, %s);\",\n                 ttime, e$metoda, e$param1, e$param2, e$param3, e$param4, e$param5,\n                 stats$N, stats$MBE, stats$RMBE, stats$RMSE, stats$RRMSE, stats$MAE, stats$RMAE, stats$MPE, stats$MAXAE, stats$SD,\n                 e$tm_velkost, e$tm_opis, e$tm_select, e$fve[fve], e$den_hod,\n                 e$pod_gho, e$pod_obl, e$pod_tep, e$pod_vie, e$pod_vlh, e$pod_tla, e$pod_dlz, e$pod_azi, e$pod_ele,\n                 e$in_gho, e$in_obl, e$in_tep, e$in_vie, e$in_vlh, e$in_tla, e$in_dlz, e$in_azi, e$in_ele)\n  return(ret)\n}\nbuild_insert_stats <- cmpfun(build_insert_stats)\n\n\n\n# format casu\nformat.time <- function(x) UseMethod(\"format.time\")\nformat.time.difftime <- function(x) {\n  units(x) <- \"secs\"\n  x <- unclass(x)\n  NextMethod()\n}\nformat.time.default <- function(x) {\n  y <- abs(x)\n  sprintf(\"%s%02dh:%02dm:%02ds\", \n          ifelse(x < 0, \"-\", \"\"), # sign\n          y %% 86400 %/% 3600,  # hours \n          y %% 3600 %/% 60,  # minutes\n          y %% 60 %/% 1) # seconds\n}\n\n# vrati connection na databazu\ngetConnection <- function(drv) {\n  con <- dbConnect(drv, dbname = \"test_db\", host = \"localhost\", \n                   port = 5432, user = \"postgres\", password = \"password\")\n  return(con)\n}\ngetConnection <- cmpfun(getConnection)\n\ngetConnection2 <- function(drv) {\n  con <- dbConnect(drv, dbname = \"test2_db\", host = \"localhost\", \n                   port = 5432, user = \"postgres\", password = \"password\")\n  return(con)\n}\ngetConnection2 <- cmpfun(getConnection)2\n\n\n# all statistics \nall_statistics <- function(actual, predicted) {\n  mdval <- modeval(predicted, actual, stat=c(\"N\",\"MBE\",\"RMBE\",\"RMSE\",\"RRMSE\",\"MAE\",\"RMAE\",\"MPE\",\"SD\"),minlength=2)\n  mdval$MAXAE <- max(ae(actual, predicted))\n  return(mdval)\n}\n\n# executes command stored in string\nunq <- function(com) {\n  return(eval(parse(text=com)))\n}\nunq <- cmpfun(unq)\n\n# add item into vector\nvector.add <- function(vec, item) {\n  vec[length(vec)+1] <- item\n  return(vec)\n}\nvector.add <- cmpfun(vector.add)\n",
    "created" : 1462548671259.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3571586124",
    "id" : "925BD089",
    "lastKnownWriteTime" : 1462566649,
    "last_content_update" : 1462566649240,
    "path" : "~/GitHub/baka/R source/new_way/functions.R",
    "project_path" : "functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}